{
	"set": {
		"prefix": "set",
		"body": [
			"SET @${1:VAR_NAME} = "
		],
		"description": "Set variable value"
	},
	"for-loop": {
		"prefix": "for",
		"body": [
			"FOR @${1:VAR_NAME} = ${2:START_EXPR} TO ${3:END_EXPR} DO",
			"    ${4}",
			"NEXT @${1:VAR_NAME}"
		],
		"description": "For loop"
	},
	"if-then": {
		"prefix": "if-then",
		"body": [
			"IF ${1:CONDITION} THEN",
			"    ${2}",
			"ENDIF"
		],
		"description": "IF THEN"
	},
	"if-then-else": {
		"prefix": "if-then-else",
		"body": [
			"IF ${1:CONDITION} THEN",
			"    ${2}",
			"ELSE",
			"    ${3}",
			"ENDIF"
		],
		"description": "IF THEN ELSE"
	},
	"if-then-elseif": {
		"prefix": "if-then-elseif",
		"body": [
			"IF ${1:CONDITION} THEN",
			"    ${3}",
			"ELSEIF ${2} THEN",
			"    ${4}",
			"ELSE",
			"    ${5}",
			"ENDIF"
		],
		"description": "IF THEN ELSEIF"
	},
	"claimrow": {
		"body": [
			"ClaimRow(${1:STRING}, ${2:STRING}, ${3:STRING}, ${4:STRING})"
		],
		"prefix": "ClaimRow",
		"description": "ClaimRow(1, 2, 3, 4)\n\nThis function returns a row from a data extension and locks the row to prevent the information from use in another context until the row claimed status changes. If the function finds a row with the correct matching set of keys, the function returns those values. If the function finds no claimed row, the function sets key values in an unclaimed row and returns that row. If the function returns no row at all, you must set up the function to raise an error, ignore the result, or provide default content. Specify multiple pairs of column names and values as needed.\n\n========== PARAMETERS ============\n\n1* [STRING] \nName of data extension for claim or retrieve action\n\n2* [STRING] \nName of column used to identify claimed row\n\n3* [STRING] \nName of data extension key column\n\n4* [STRING] \nValue of data extension key column\n\n========== EXAMPLES ==============\n\n<table class=\"table table-hover\">\n<tr>\n<td>Coupon Code (ClaimRow)</td>\n<td>\n%%[VAR @CouponRow\nSET @CouponRow = ClaimRow('Coupon', 'IsClaimed', 'JobID', JobID, 'ListID', ListID, 'BatchID', _JobSubscriberBatchID, 'SubscriberID', SubscriberID)\nIF EMPTY(@CouponRow) THEN ]%%\nNo coupons available\n%%[ ELSE ]%%\nYour Coupon Code is %%= FIELD(@CouponRow,'CouponCode') =%%\n%%[ ENDIF ]%%\n</td>\n</tr>\n</table>\n"
	},
	"dateparse": {
		"body": [
			"DateParse(${1:DATE}, ${2:BOOLEAN})"
		],
		"prefix": "DateParse",
		"description": "DateParse(1, 2)\n\nReturns a DateTime object from a date string.\n\n========== PARAMETERS ============\n\n1* [DATE] \nDate string used to derive the DateTime object\n\n2  [BOOLEAN] \nDetermines whether the system returns the object in UTC format. A value of true returns the DateTime object as UTC.\n\n========== EXAMPLES ==============\n\nDateParse('2009/10/17 02:30PM')\n"
	},
	"random": {
		"body": [
			"Random(${1:INT}, ${2:INT})"
		],
		"prefix": "Random",
		"description": "Random(1, 2)\n\nReturns a random integer between the values you specify, inclusive.\n\n========== PARAMETERS ============\n\n1* [INT] \nLeast value to return as the returned random integer\n\n2* [INT] \nGreatest value to return as the random integer\n\n========== EXAMPLES ==============\n\nSET @low=2  \nSET @high=200\n%%=Random(@low,@high)=%%\n"
	},
	"addobjectarrayitem": {
		"body": [
			"AddObjectArrayItem(${1:API OBJECT}, ${2:STRING}, ${3:STRING})"
		],
		"prefix": "AddObjectArrayItem",
		"description": "AddObjectArrayItem(1, 2, 3)\n\nAppends an object to an array on an API object\n\n========== PARAMETERS ============\n\n1* [API OBJECT] \nAPI object containing the array\n\n2* [STRING] \nArray property to receive new item\n\n3* [STRING] \nItem to add to array\n\n========== EXAMPLES ==============\n\nAddObjectArrayItem(@mySubscriber,'Attribute',@myNewAttribute)\n"
	},
	"longsfid": {
		"body": [
			"LongSFID(${1:STRING})"
		],
		"prefix": "LongSFID",
		"description": "LongSFID(1)\n\nReturns the 18-character Salesforce ID from a shortened 15-character version.\n\n========== PARAMETERS ============\n\n1* [STRING] \nThe 15-character Salesforce ID\n\n========== EXAMPLES ==============\n\n%%=LongSFID('0036000000QKv5T')=%%\n"
	},
	"wat and watp": {
		"body": [
			"WAT and WATP(${1:STRING}, ${2:STRING})"
		],
		"prefix": "WAT and WATP",
		"description": "WAT and WATP(1, 2)\n\nreturns the values of the Web Analytics Tracking (WAT) parameter with the specified external key. Contact Marketing Cloud Support to set the external key values in the Web Analytics Connector. The function substitutes optional parameters for calls to the WATP function within the tracking parameter set in the Sender Profile. The WAT call parameters must use constant or numeric values. Variable, attribute, field, and faction values don't allow job-level resolution to the desired link query string parameters.\n\n========== PARAMETERS ============\n\n1* [STRING] \nString to perform the match against\n\n2* [STRING] \nValue used to replace the WATP function tracking parameter\n\n========== EXAMPLES ==============\n\nWAT('Omniture','1234')\n"
	},
	"queryparameter": {
		"body": [
			"QueryParameter(${1:STRING})"
		],
		"prefix": "QueryParameter",
		"description": "QueryParameter(1)\n\nRetrieves the value from a query string, based on the key defined for it. Use this function to provide information on users visiting a site via the URL.\n\n========== PARAMETERS ============\n\n1* [STRING] \nKey used to pull value\n\n========== EXAMPLES ==============\n\nhttp://example.com?j=Tim\n"
	},
	"treatascontent": {
		"body": [
			"TreatAsContent(${1:STRING})"
		],
		"prefix": "TreatAsContent",
		"description": "TreatAsContent(1)\n\nTreats the string as though it came in from a content area. To retrieve tracking information associated with these strings, wrap the embedded links within your HTML content using the HTTPGETWRAP command for tracking and analytics. Use the TreatAsContentArea() function to treat your string as if it came from a content area.\n\n========== PARAMETERS ============\n\n1* [STRING] \nString to return as content\n\n========== EXAMPLES ==============\n\nTreatAsContent(Field(@row,'Content'))\n"
	},
	"createsalesforceobject": {
		"body": [
			"CreateSalesforceObject(${1:STRING}, ${2:NUMERIC}, ${3:STRING}, ${4:STRING})"
		],
		"prefix": "CreateSalesforceObject",
		"description": "CreateSalesforceObject(1, 2, 3, 4)\n\nCreates a record in your integrated Salesforce account and returns the ID of the record created. This function works only for an account integrated with a Salesforce account.\n\n========== PARAMETERS ============\n\n1* [STRING] \nType of object to create a record in, such as Lead or CustomObject\n\n2* [NUMERIC] \nNumber of fields specified to add in the record\n\n3* [STRING] \nName of field\n\n4* [STRING] \nValue of field.\n\n========== EXAMPLES ==============\n\n%%[ var @id\nset @id=CreateSalesforceObject('lead', 2, 'FirstName', 'Chris', 'LastName', 'Cruz')\n]%%\n"
	},
	"row": {
		"body": [
			"Row(${1:STRING}, ${2:NUMERIC})"
		],
		"prefix": "Row",
		"description": "Row(1, 2)\n\nReturns specified row from specified rowset or array\n\n========== PARAMETERS ============\n\n1* [STRING] \nSpecified rowset\n\n2* [NUMERIC] \nCount of row to return\n\n========== EXAMPLES ==============\n\n%%=Row(@Rowset,1)=%%\n"
	},
	"redirect": {
		"body": [
			"Redirect(${1:STRING})"
		],
		"prefix": "Redirect",
		"description": "Redirect(1)\n\nRedirects the recipient's browser to the specified URL.\n\n========== PARAMETERS ============\n\n1* [STRING] \nURL used for redirect\n\n========== EXAMPLES ==============\n\n%%=Redirect('http://example.com')=%%\n"
	},
	"wraplongurl": {
		"body": [
			"WrapLongURL(`)"
		],
		"prefix": "WrapLongURL",
		"description": "WrapLongURL(`)\n\nreturns a wrapped URL for the long URL provided in the string parameter of the function. You can only modify URLs longer than 975 characters, and this function does not replace the standard link wrapping functionality implemented in the Marketing Cloud application. Use this function to mitigate a known limitation with long URLs in Microsoft Outlook 2007 and URLs such as those included in an image source tag.\n\n========== PARAMETERS ============\n\n`* [STRING] \nLong RL to be wrapped\n\n========== EXAMPLES ==============\n\n%%=WrapLongURL(\"http://example.com/exceedinglylongimageurl.jpg\")=%%\n"
	},
	"substring": {
		"body": [
			"Substring(${1:STRING}, ${2:NUMERIC}, ${3:NUMERIC})"
		],
		"prefix": "Substring",
		"description": "Substring(1, 2, 3)\n\nReturns the portion of the specified string starting with the specified character position and no longer than the specified length. If the specified character position exceeds the length of the specified string, the function returns an empty string.\n\n========== PARAMETERS ============\n\n1* [STRING] \nInitial string value\n\n2* [NUMERIC] \nCharacter position used to begin substring\n\n3  [NUMERIC] \nMaximum length of substring\n\n========== EXAMPLES ==============\n\n%%=Substring('abcdef',2,2)=%%\n"
	},
	"indexof": {
		"body": [
			"IndexOf(${1:STRING}, ${2:STRING})"
		],
		"prefix": "IndexOf",
		"description": "IndexOf(1, 2)\n\nReturns character position where string occurs in the variable. Index numbering begins with 1.\n\n========== PARAMETERS ============\n\n1* [STRING] \nVariable to analyze\n\n2* [STRING] \nCharacter position to return\n\n========== EXAMPLES ==============\n\n%%=IndexOf(@abc,'love')=%%\n"
	},
	"insertdata": {
		"body": [
			"InsertData(${1:STRING}, ${2:STRING}, ${3:STRING})"
		],
		"prefix": "InsertData",
		"description": "InsertData(1, 2, 3)\n\nInserts a row in a data extension. Returns the number of rows affected. Use this function with landing pages, SMS and MMS messages in MobileConnect, push messages in MobilePush, and messages in GroupConnect.\n\n========== PARAMETERS ============\n\n1* [STRING] \nData extension from which to insert specified row\n\n2* [STRING] \nName of column used to build insert clause\n\n3* [STRING] \nValue of column used to build insert clause\n\n========== EXAMPLES ==============\n\nInsertData('SomeDE','FirstName',FirstName,'LastName',LastName,'CreatedDate',NOW())\n"
	},
	"retrievesalesforceobjects": {
		"body": [
			"RetrieveSalesforceObjects(${1:STRING}, ${2:STRING}, ${3:STRING}, ${4:STRING}, ${5:STRING})"
		],
		"prefix": "RetrieveSalesforceObjects",
		"description": "RetrieveSalesforceObjects(1, 2, 3, 4, 5)\n\nReturns a rowset with the selected information from Salesforce objects that match the criteria you specify. This function works only with an account integrated with a Salesforce account. Include multiple sets of ordinals 3, 4, and 5 to retrieve information as necessary. Because this function returns data as a rowset, use Row() and Field() to evaluate the data.\n\n========== PARAMETERS ============\n\n1* [STRING] \nType of object from which to retrieve information, such as Lead or CustomObject\n\n2* [STRING] \nNames of fields from which to retrieve information, including multiple comma-separated values such as FirstName,LastName\n\n3* [STRING] \nNames of fields used to match the record for selection as a WHERE clause. Include only one field name for this parameter.\n\n4* [STRING] \nOperator used to compare the fifth ordinal to the third ordinal. Valid values include:\n= (is equal to)\n(is less than)\n> (is greater than)\n!= (is not equal to)\n= (is less than or equal to)\n>= (is greater than or equal to)\n\n5* [STRING] \nValue to compare to the third ordinal for record selection. You may add additional name, operator, and value parameters for more complex filtering. This function joins these WHERE clauses with AND only.\n"
	},
	"lookuporderedrows": {
		"body": [
			"LookupOrderedRows(${1:STRING}, ${2:NUMERIC}, ${3:STRING}, ${4:STRING}, ${5:STRING})"
		],
		"prefix": "LookupOrderedRows",
		"description": "LookupOrderedRows(1, 2, 3, 4, 5)\n\nReturns a specified number of rows. You can specify multiple additional field and value pairs as part of an AND clause. The function returns an empty set when no values match.\n\n========== PARAMETERS ============\n\n1* [STRING] \nName of data extension from which to return specified rows\n\n2* [NUMERIC] \nNumber of rows to return. A value less than 1 returns the default 2000 rows. This limitation enhances script performance.\n\n3* [STRING] \nDefines order of return as field ASC or field DESC\n\n4* [STRING] \nField to use to build WHERE clause\n\n5* [STRING] \nValue to use to build WHERE clause\n\n========== EXAMPLES ==============\n\nSet @rows2 = LookupOrderedRows(\"Cars\",4,\"Horsepower Desc\",\"MPG\",Field(@cardata,\"MPG\"))\n"
	},
	"add": {
		"body": [
			"Add(${1:NUMERIC}, ${2:NUMERIC})"
		],
		"prefix": "Add",
		"description": "Add(1, 2)\n\nReturns the sum of the provided values.\n\n========== PARAMETERS ============\n\n1* [NUMERIC] \nFirst value to add\n\n2* [NUMERIC] \nSecond value to add\n\n========== EXAMPLES ==============\n\n%%=Add(@abc,@def)=%%\n"
	},
	"stringtodate": {
		"body": [
			"StringToDate(${1:STRING}, ${2:STRING})"
		],
		"prefix": "StringToDate",
		"description": "StringToDate(1, 2)\n\nParses a datetime string with the user's current settings and returns a .NET datetime object.\n\n========== PARAMETERS ============\n\n1* [STRING] \nString to parse\n\n2* [STRING] \nCharacter set used for encoding. This function defaults to UTC-8 if not specified. You can also specify UTC-16.\n\n========== EXAMPLES ==============\n\nStringToDate('2009-10-31 08:00 AM')\n"
	},
	"sha256": {
		"body": [
			"SHA256(${1:STRING}, ${2:STRING})"
		],
		"prefix": "SHA256",
		"description": "SHA256(1, 2)\n\nReturns an SHA256 hash tag based on the string value passed through the function.\n\n========== PARAMETERS ============\n\n1* [STRING] \nAlphanumeric string from which SHA256 hash tag derives\n\n2  [STRING] \nThe character set to use for the encoding; this function defaults to UTF-8 if not specified. You can also specify UTF-16.\n\n========== EXAMPLES ==============\n\n%%=SHA256('Insert Text Here','UTF-16')=%%\n"
	},
	"beginimpressionregion": {
		"body": [
			"BeginImpressionRegion(${1:STRING})"
		],
		"prefix": "BeginImpressionRegion",
		"description": "BeginImpressionRegion(1)\n\nDenotes the beginning of a region to track with impression tracking.\n\n========== PARAMETERS ============\n\n1* [STRING] \nStatic constant containing name of impression region\n\n========== EXAMPLES ==============\n\n%%=BeginImpressionRegion(\"Header\")=%%\n"
	},
	"deletede": {
		"body": [
			"DeleteDE(${1:STRING}, ${2:STRING}, ${3:STRING})"
		],
		"prefix": "DeleteDE",
		"description": "DeleteDE(1, 2, 3)\n\nDeletes rows in a data extension with column values specified in name value pairs. Returns no value. Use this function with email messages at send time only.\n\n========== PARAMETERS ============\n\n1* [STRING] \nName of data extension from which to delete the specified row\n\n2* [STRING] \nName of column used to identify rows to delete.\n\n3* [STRING] \nValue used to identify rows to delete.\n\n========== EXAMPLES ==============\n\nDeleteDE('SendDE', '_SubscriberKey','12345')\n"
	},
	"buildrowsetfromxml": {
		"body": [
			"BuildRowSetFromXML(${1:STRING}, ${2:STRING}, ${3:BOOLEAN})"
		],
		"prefix": "BuildRowSetFromXML",
		"description": "BuildRowSetFromXML(1, 2, 3)\n\nCreates a rowset from XML. This function can return an empty rowset on error. This function is for use at send time only.\n\n========== PARAMETERS ============\n\n1* [STRING] \nXML within the node\n\n2* [STRING] \nXPATH argument that specifies the XML node for use in building the rowset\n\n3* [BOOLEAN] \nIndicates whether to return an empty rowset on error. A value of 0 does not return an empty rowset. A value of 1 returns an empty rowset.\n\n========== EXAMPLES ==============\n\n<root>\n<Flight origin='IND' dest='NYC'>100.00</Flight>\n<Flight origin='IND' dest='LAX' carrier='UAL'>200.00</Flight>\n<Flight origin='IND' dest='SEA'>500<PerBagSurcharge>25</PerBagSurcharge></Flight>\n</root>\n"
	},
	"setsmsconversationnextkeyword": {
		"body": [
			"SetSmsConversationNextKeyword(${1:STRING}, ${2:STRING}, ${3:STRING})"
		],
		"prefix": "SetSmsConversationNextKeyword",
		"description": "SetSmsConversationNextKeyword(1, 2, 3)\n\nSets the keyword for the next conversation path based on an SMS response from an MO user. Use the current keyword or a new keyword for a different conversation path. You can use this AMPscript function for MobileConnect. This function does not create a new conversation. SetSMSConversationNextKeyword directs the current conversation to the next keyword to use as part of that overall conversation. You cannot use this function with conversation-based templates, including Double Opt-In or Info Capture\n\n========== PARAMETERS ============\n\n1* [STRING] \nShort code of the SMS service\n\n2* [STRING] \nMOBILE_NUMBER variable for the user's mobile number\n\n3* [STRING] \nKeyword name to set as the next conversation keyword\n\n========== EXAMPLES ==============\n\n%%=SetSmsConversationNextKeyword('12345',MOBILE_NUMBER,'EXAMPLE')=%%\n"
	},
	"formatcurrency": {
		"body": [
			"FormatCurrency(${1:NUMERIC}, ${2:STRING}, ${3:NUMERIC}, ${4:STRING})"
		],
		"prefix": "FormatCurrency",
		"description": "FormatCurrency(1, 2, 3, 4)\n\nFormats a specified string as a currency value. This function rounds the numbers up if the specified format uses fewer decimal points than the value itself and the remaining numbers total 5 or more. The function rounds the numbers down if the specified format uses fewer decimal points than the value itself and the remaining numbers total less than 5.\n\n========== PARAMETERS ============\n\n1* [NUMERIC] \nValue to receive the specified formatting\n\n2* [STRING] \nISO culture code used to indicate the correct currency unit\n\n3  [NUMERIC] \nThe number of decimal places to include in the formatted value\n\n4  [STRING] \nThe currency symbol to use with the value. This value overrides the value specified by the culture code.\n\n========== EXAMPLES ==============\n\n%%=FormatCurrency(1234.567,\"en-US\")=%%\n"
	},
	"dateadd": {
		"body": [
			"DateAdd(${1:DATE}, ${2:NUMERIC}, ${3:STRING})"
		],
		"prefix": "DateAdd",
		"description": "DateAdd(1, 2, 3)\n\nReturns the sum of a date and an integer, along with a time stamp.\n\n========== PARAMETERS ============\n\n1* [DATE] \nDate to add using MM/dd/yyyy or YYYY-MM-DD values\n\n2* [NUMERIC] \nInteger to add\n\n3* [STRING] \nUnit of time of the integer. Valid values include Y, M, D, H, and MI.\n\n========== EXAMPLES ==============\n\n%%=DateAdd(@today, '1','D')=%%\n"
	},
	"transformxml": {
		"body": [
			"TransformXML(${1:STRING}, ${2:STRING})"
		],
		"prefix": "TransformXML",
		"description": "TransformXML(1, 2)\n\nApplies an XSL transform to an XML document.\n\n========== PARAMETERS ============\n\n1* [STRING] \nXML to transform\n\n2* [STRING] \nXSL document used in the transformation\n\n========== EXAMPLES ==============\n\n%%= TransformXML(GetPortfolioItem('formGenXML'),GetPortfolioItem('formGenXSL')) =%%\n"
	},
	"authenticatedemployeeid": {
		"body": [
			"AuthenticatedEmployeeID()"
		],
		"prefix": "AuthenticatedEmployeeID",
		"description": "AuthenticatedEmployeeID()\n\nReturns the employee ID of the authenticated landing page user. Use this function only with Microsites when using Sender Authenticated Redirection. Not for use with CloudPages.\n\n========== EXAMPLES ==============\n\nset @ID = AuthenticatedEmployeeID()\n"
	},
	"lookuprowscs": {
		"body": [
			"LookupRowsCS(${1:STRING}, ${2:STRING}, ${3:STRING})"
		],
		"prefix": "LookupRowsCS",
		"description": "LookupRowsCS(1, 2, 3)\n\nReturns a rowset from a data extension where the field matches the specified value. The system treats strings as case-sensitive. Specify additional field value pairs as part of an AND clause. This function returns a maximum of 2000 rows. To better control the number or the order of returned rows, use the LookupOrderedRowsCS() function. This limitation enhances script performance.\n\n========== PARAMETERS ============\n\n1* [STRING] \nName of data extension from which to return specified rows\n\n2* [STRING] \nColumn name used to identify rows to return\n\n3* [STRING] \nValue used to match rows to return\n\n========== EXAMPLES ==============\n\n%%[ VAR @Rows, @RowsCSF, @RowsCST\nSET @Rows = LOOKUPROWS('CustomObject1','City','greenwood')\nSET @RowsCSF = LOOKUPROWSCS('CustomObject1','City','greenwood')\nSET @RowsCST = LOOKUPROWSCS('CustomObject1','City','Greenwood')\n]%%\nCase Insensitive Test:\nRow Count: %%=ROWCOUNT(@Rows) =%%\nCase Sensitive Test:\nRow Count No Match: %%=ROWCOUNT(@RowsCSF) =%%\nRow Count Match: %%=ROWCOUNT(@RowsCST) =%%\n"
	},
	"now": {
		"body": [
			"Now(${1:BOOLEAN})"
		],
		"prefix": "Now",
		"description": "Now(1)\n\nReturns the current system date and time. When included in content for triggered sends, the time indicates when the triggered send definition for the message started or republished. The time does not not reflect when the send actually occurred. Now() is in Central Standard Time (CST) without daylight saving time.\n\n========== PARAMETERS ============\n\n1  [BOOLEAN] \nDetermines whether to preserve the email sent time for post-send resolution of Now(). A value of true preserves the email sent time.\n\n========== EXAMPLES ==============\n\nNow()\n"
	},
	"decryptsymmetric": {
		"body": [
			"DecryptSymmetric(${1:STRING}, ${2:STRING}, ${3:STRING}, ${4:STRING}, ${5:STRING}, ${6:STRING}, ${7:STRING}, ${8:STRING})"
		],
		"prefix": "DecryptSymmetric",
		"description": "DecryptSymmetric(1, 2, 3, 4, 5, 6, 7, 8)\n\nThis function decrypts encrypted data using the supplied algorithm and encryption values. Supply either a value or a valid external key for the password, initialization vector (IV), and salt. You can also use the external keys if you previously created keys in the Key Management section of the Marketing Cloud app. Otherwise, the function generates a password using the password parameter or stored value, the salt parameter or stored value, and the IV parameter or stored value. If you don't pass or reference an initialization vector, the function uses the password parameter or stored value as the initialization vector. This function treats Salt and IV values either directly provided or looked up by key as hex strings, with each pair of characters representing a single byte in the larger strings. Don't attempt to use these values as a cipher string, as you cannot successfully decrypt those strings using this function. You can wrap the EncryptSymmetric() and DecryptSymmetric() functions in Base64Encode() and Base64Decode() functions to view the final string in plain text. You can only use the EncryptSymmetric() and DecryptSymmetric() AMPscript function on data contained within Marketing Cloud. Marketing Cloud does not support the use of these functions in conjunction with outside or third-party encryption and decryption functionality.\n\n========== PARAMETERS ============\n\n1* [STRING] \nEncrypted data passed to function\n\n2* [STRING] \nAlgorithm used to encrypt the data. Valid values include aes, des, and tripledes.\n\n3* [STRING] \nPassword external key\n\n4* [STRING] \nPassword\n\n5* [STRING] \nSalt external key\n\n6* [STRING] \nSalt value\n\n7* [STRING] \nInitialization vector external key\n\n8* [STRING] \nInitialization vector value\n\n========== EXAMPLES ==============\n\nSET @clearData=DecryptSymmetric(@encData, 'AES', @null, 'aardvark', @null, '0000000000000000', @null, '00000000000000000000000000000000')\n"
	},
	"mod": {
		"body": [
			"Mod(${1:NUMERIC}, ${2:NUMERIC})"
		],
		"prefix": "Mod",
		"description": "Mod(1, 2)\n\nReturns the remainder after dividing the first number by the second number.\n\n========== PARAMETERS ============\n\n1* [NUMERIC] \nDividend value\n\n2* [NUMERIC] \nDivisor value\n\n========== EXAMPLES ==============\n\n%%=Mod(@abc,@def)=%%\n"
	},
	"updatede": {
		"body": [
			"UpdateDE(${1:STRING}, ${2:NUMERIC}, ${3:STRING}, ${4:STRING}, ${5:STRING}, ${6:STRING})"
		],
		"prefix": "UpdateDE",
		"description": "UpdateDE(1, 2, 3, 4, 5, 6)\n\nUpdates an existing row in a data extension for the specified number of columns used to build the where clause listed in name value pairs followed by a list of columns to be updated in name value pairs. Returns no value. Use this function with email messages at send time only.\n\n========== PARAMETERS ============\n\n1* [STRING] \nName of data extension from which to update the specified row\n\n2* [NUMERIC] \nNumber of columns used to build WHERE clause\n\n3* [STRING] \nColumn name to build WHERE clause\n\n4* [STRING] \nValue used to build WHERE clause\n\n5* [STRING] \nColumn name to build INSERT clause\n\n6* [STRING] \nValue used to build INSERT clause\n\n========== EXAMPLES ==============\n\nUpdateDE('SendDE',1,'_SubscriberKey',_SubscriberKey,'DateSent',NOW())\n"
	},
	"encryptsymmetric": {
		"body": [
			"EncryptSymmetric(${1:STRING}, ${2:STRING}, ${3:STRING}, ${4:STRING}, ${5:STRING}, ${6:STRING}, ${7:STRING}, ${8:STRING})"
		],
		"prefix": "EncryptSymmetric",
		"description": "EncryptSymmetric(1, 2, 3, 4, 5, 6, 7, 8)\n\nThis function encrypts plain text data using the supplied algorithm and encryption values. You can supply either a value or a valid external key for the password, initialization vector (IV), and salt. You can also use the external keys if you previously created keys in the Key Management section of the user interface. Otherwise, the function generates a password using the password parameter or stored value, the salt parameter or stored value, and the IV parameter or stored value. If you don't pass or reference an initialization vector, the function uses the password parameter or stored value as the initialization vector. All output provided by this function uses Base64 encoding. This function treats salt and IV values either directly provided or looked up by key as hex strings, with each pair of characters representing a single byte in the larger strings. Don't attempt to use these values as a cipher string, as you cannot successfully encrypt those strings using this function. You can wrap the EncryptSymmetric() and DecryptSymmetric() functions in Base64Encode() and Base64Decode() functions to view the final string in plain text. You can only use the EncryptSymmetric() and DecryptSymmetric() AMPscript function on data contained within Marketing Cloud. Marketing Cloud does not support the use of these functions in conjunction with outside or third-party encryption and decryption functionality.\n\n========== PARAMETERS ============\n\n1* [STRING] \nPlain text data passed to the function\n\n2* [STRING] \nAlgorithm used to encrypt the data. Valid values include aes, des, and tripledes.\n\n3* [STRING] \nPassword external key\n\n4* [STRING] \nPassword\n\n5* [STRING] \nSalt external key\n\n6* [STRING] \nSalt value\n\n7* [STRING] \nInitialization vector external key\n\n8* [STRING] \nInitialization vector value\n\n========== EXAMPLES ==============\n\nSET @encData=EncryptSymmetric('Example', 'AES', @null, 'password', @null, '0000000000000000', @null, '00000000000000000000000000000000')\n"
	},
	"httprequestheader": {
		"body": [
			"HTTPRequestHeader(${1:STRING})"
		],
		"prefix": "HTTPRequestHeader",
		"description": "HTTPRequestHeader(1)\n\nRetrieves the specified header from an HTTP request. You can only use the standard HTTP headers outlined in RFC 7231 with this function. Use only in landing pages.\n\n========== PARAMETERS ============\n\n1* [STRING] \nHeader to retrieve from an HTTP request\n\n========== EXAMPLES ==============\n\n%%=HTTPRequestHeader('Referer')=%%\n"
	},
	"cloudpagesurl": {
		"body": [
			"CloudPagesURL(${1:STRING}, ${2:STRING}, ${3:STRING})"
		],
		"prefix": "CloudPagesURL",
		"description": "CloudPagesURL(1, 2, 3)\n\nProvides a way for users to reference a CloudPages URL in an account from an email message. Use this function in an email to pass information via a URL in an encrypted query string. For example, you could share a single unsubscription or profile center page for use in any sent email message. This method passes information in an encrypted query string without passing subscriber information or values in clear text.\n\n========== PARAMETERS ============\n\n1* [STRING] \nPage ID for the landing page reference in the URL. Locate this value on the appropriate CloudPage content details page. Page ID can be from the enterprise (EID) or the business unit (MID) where the function is used.\n\n2* [STRING] \nName for additional parameter included in encrypted query string\n\n3* [STRING] \nValue for additional parameter included in encrypted query string\n\n========== EXAMPLES ==============\n\n<p><a title=\"MyPage\" href=\"%%=RedirectTo(CloudPagesURL(77777))=%%\" alias=\"ThisAlias\" conversion=\"false\">Click to unsubscribe</a></p>\n"
	},
	"authenticatedemployeenotificationaddress": {
		"body": [
			"AuthenticatedEmployeeNotificationAddress()"
		],
		"prefix": "AuthenticatedEmployeeNotificationAddress",
		"description": "AuthenticatedEmployeeNotificationAddress()\n\nReturns the notification email address of the authenticated landing page user. Use this function only with Microsites when using Sender Authenticated Redirection. Not for use with CloudPages.\n\n========== EXAMPLES ==============\n\nset @address= AuthenticatedEmployeeNotificationAddress()\n"
	},
	"output": {
		"body": [
			"Output(${1:STRING})"
		],
		"prefix": "Output",
		"description": "Output(1)\n\nReturns the results of AMPscript code executed within a code block, such as Concat() or V(),  and includes the results inside the rendered content. The function does not return any passed direct literals.\n\n========== PARAMETERS ============\n\n1* [STRING] \nCode used to produce results output by system\n\n========== EXAMPLES ==============\n\n%%[ var @output\nSet @output = 'My output'\nOutputLine(Concat(@output,' is a success!')) ]%%\n"
	},
	"isphonenumber": {
		"body": [
			"IsPhoneNumber(${1:STRING})"
		],
		"prefix": "IsPhoneNumber",
		"description": "IsPhoneNumber(1)\n\nReturns a true or false result indicating whether the string value passed in is a valid phone number. This function uses the same phone number validation as the SMS components of the application.\n\n========== PARAMETERS ============\n\n1* [STRING] \nPhone number to evaluate\n\n========== EXAMPLES ==============\n\nIsPhoneNumber('5555555555')\n"
	},
	"claimrowvalue": {
		"body": [
			"ClaimRowValue(${1:STRING}, ${2:STRING}, ${3:STRING}, ${4:STRING}, ${5:STRING}, ${6:STRING})"
		],
		"prefix": "ClaimRowValue",
		"description": "ClaimRowValue(1, 2, 3, 4, 5, 6)\n\nThis function returns a value from a data extension and locks the row to prevent the information from use in another context until the value claimed status changes. If the function finds a row with the correct matching set of keys, the function returns the requested column value. If the function finds no claimed row, the function attempts to claim an unused row. If the function cannot find or claim value, the function returns the specified default value. Otherwise, the function returns an error. Specify multiple pairs of column names and values as needed.\n\n========== PARAMETERS ============\n\n1* [STRING] \nName of data extension for claim or retrieve action\n\n2* [STRING] \nName of column in data extension from which to retrieve the return value\n\n3* [STRING] \nName of column in data extension that indicates a claimed or unclaimed row\n\n4  [STRING] \nDefault value to use in case the function fails to claim a row\n\n5* [STRING] \nName of the data extension key column\n\n6* [STRING] \nValue of data extension key column\n\n========== EXAMPLES ==============\n\n<table class=\"table table-hover\">\n<tr>\n<td>Coupon Code (ClaimRowValue no default)</td>\n<td>%%= ClaimRowValue('Coupon', 'CouponCode', 'IsClaimed', , 'JobID', JobID, 'ListID', ListID, 'SubscriberID', SubscriberID) =%%</td>\n</tr>\n</table>\nThe sample below retrieves a distinct row each time a specific job sends to a specific recipient. If the function does not find an appropriate value, it uses the provided default information.\n<table class=\"table table-hover\">\n<tr>\n<td>Coupon Code (ClaimRowValue with default)</td>\n<td>%%= ClaimRowValue('Coupon', 'CouponCode', 'IsClaimed', 'None Available', 'JobID', JobID, 'ListID', ListID, 'BatchID', _JobSubscriberBatchID, 'SubscriberID', SubscriberID) =%%</td>\n</tr>\n</table>\n"
	},
	"contentareabyname": {
		"body": [
			"ContentAreaByName(${1:STRING}, ${2:STRING}, ${3:BOOLEAN}, ${4:STRING}, ${5:NUMERIC})"
		],
		"prefix": "ContentAreaByName",
		"description": "ContentAreaByName(1, 2, 3, 4, 5)\n\nReturns the content contained in the specified stored content area.\n\n========== PARAMETERS ============\n\n1* [STRING] \nName of the content area to return, including the path within the my contents folder if necessary\n\n2  [STRING] \nName of the impression region to start\n\n3  [BOOLEAN] \nDetermines whether the function returns an error when the system cannot locate the specified content area or returns an invalid content area. A value of true returns an error. A value of false does not return an error. Defaults to true.\n\n4  [STRING] \nDefault content to return if an error occurs. Defaults to an empty string.\n\n5  [NUMERIC] \nOutput parameter that returns the status of the call. A value of 0 indicates the function found the content area and successfully rendered the content. A value of -1 indicates either no content or an invalid content area.\n\n========== EXAMPLES ==============\n\n%%=ContentAreaByName('my contents\\Stocks\\Weekly Portfolio')=%%\n"
	},
	"urlencode": {
		"body": [
			"URLEncode(${1:STRING}, ${2:BOOLEAN}, ${3:BOOLEAN})"
		],
		"prefix": "URLEncode",
		"description": "URLEncode(1, 2, 3)\n\nReturns the specified URL with spaces replaced with %20 or fully encodes all non-alphanumeric characters.\n\n========== PARAMETERS ============\n\n1* [STRING] \nString containing the URL and attribute value\n\n2  [BOOLEAN] \nValue indicating how function handles illegal URL characters. A value of 0 replaces space in URL with %20. A value of 1 encodes any illegal characters used in URL, such as spaces or accented letters, in the query string of the given URL. This parameter defaults to 0.\n\n3  [BOOLEAN] \nValue indicating how function encodes passed string values. A value of 0 encodes only portion of passed string following the ? character. A value of 1 encodes full passed string. This parameter defaults to 0.\n\n========== EXAMPLES ==============\n\nURLEncode('http://example.com?p=first name')\n"
	},
	"domain": {
		"body": [
			"Domain(${1:STRING})"
		],
		"prefix": "Domain",
		"description": "Domain(1)\n\nReturns domain portion of an email address.\n\n========== PARAMETERS ============\n\n1* [STRING] \nEmail address\n\n========== EXAMPLES ==============\n\n%%=Domain(sales@example.com)=%%\n"
	},
	"addmscrmlistmember": {
		"body": [
			"AddMscrmListMember(${1:STRING}, ${2:STRING})"
		],
		"prefix": "AddMscrmListMember",
		"description": "AddMscrmListMember(1, 2)\n\nAdds the indicated record to the indicated marketing list. Does not return a value.\n\n========== PARAMETERS ============\n\n1* [STRING] \nGUID of record to add to marketing list\n\n2* [STRING] \nGUID of marketing list receiving the record\n\n========== EXAMPLES ==============\n\n%%[\n/* Adds a lead, contact or account to a marketing list */\nvar @guid, @list_guid\nset @guid = '2E438216-2DEE-DD11-AB3E-005056AD58C4'\nset @list_guid = '0A167EEC-6436-DD11-B7BE-000E7F30252C'\nAddMscrmListMember(@guid, @list_guid)\n]%%\n"
	},
	"uppercase": {
		"body": [
			"Uppercase(${1:STRING})"
		],
		"prefix": "Uppercase",
		"description": "Uppercase(1)\n\nReturns the specified value in all uppercase letters.\n\n========== PARAMETERS ============\n\n1* [STRING] \nValue to return\n\n========== EXAMPLES ==============\n\nSET @name = \"mary kay\"\n%%=Uppercase(@name)=%%\n"
	},
	"contentimagebykey": {
		"body": [
			"ContentImagebyKey(${1:STRING}, ${2:STRING})"
		],
		"prefix": "ContentImagebyKey",
		"description": "ContentImagebyKey(1, 2)\n\nReturns an img tag with the src attribute containing the path to an image from Content Builder. Identify the image to include with the ID value. The img tag includes the title and alt information for the selected image, as well as a border value (measured in pixels) and any identified thid value. If the value of the first parameter does not link to a valid image, you can include another image value for the second parameter as a default option. Use only with Image-type content in Content Builder. This function does not work with the Image Block type.\n\n========== PARAMETERS ============\n\n1* [STRING] \nExternal key of image to return\n\n2* [STRING] \nValue used to return image if function cannot find the original image ID\n\n========== EXAMPLES ==============\n\n%%=ContentImagebyKey(\"FirstImage\",\"DefaultImage\")=%%\n"
	},
	"httppost": {
		"body": [
			"HTTPPost(${1:STRING}, ${2:STRING}, ${3:STRING}, ${4:STRING}, ${5:STRING}, ${6:STRING})"
		],
		"prefix": "HTTPPost",
		"description": "HTTPPost(1, 2, 3, 4, 5, 6)\n\nThis function posts content to the specified URL. This function only works with HTTP on port 80 and HTTPS on port 443. Non-standard port assignments cause this function to fail. The Marketing Cloud honors any character set returned in the HTTP headers via Content-Type. For example, you can use a UTF-8 encoded HTML file with Content-Type: text/html; charset=utf-8 included in the header. If the header does not specify encoding, the application assumes all returned data will uses the character set WindowsCodePage 1252. You can change this default by contacting your Marketing Cloud account representative. Include as many header name and value pairs as necessary.\n\n========== PARAMETERS ============\n\n1* [STRING] \nURL to receive posted content\n\n2* [STRING] \nSpecified content-type header value\n\n3* [STRING] \nContent to post to specified URL\n\n4* [STRING] \nOutput parameter used to contain string representation for the status of the HTTP request, such as OK\n\n5  [STRING] \nName of additional headers to add to HTTP POST request\n\n6  [STRING] \nValue of additional headers to add to HTTP POST request\n\n========== EXAMPLES ==============\n\n%%=HTTPPost(\"http://example.com\",\"text/html\",@exampleContent,@CallStatus)=%%\n"
	},
	"raiseerror": {
		"body": [
			"RaiseError(${1:STRING}, ${2:BOOLEAN}, ${3:STRING}, ${4:STRING}, ${5:BOOLEAN})"
		],
		"prefix": "RaiseError",
		"description": "RaiseError(1, 2, 3, 4, 5)\n\nRaises the error given in string and stops processing of job. If optional B1 is included with a value of true, this function stops the send for the current subscriber only.\n\n========== PARAMETERS ============\n\n1* [STRING] \nError message to display\n\n2  [BOOLEAN] \nIndicates whether function skips send for current subscriber and continues or stops. A value of true skips the send for current subscriber and moves to next subscriber. A value of false stops the send and returns an error. Function defaults to false.\n\n3  [STRING] \nAPI error code\n\n4  [STRING] \nAPI error number\n\n5  [BOOLEAN] \nIndicates whether the function records information to data extensions before error occurs, even if the process skips the subscriber. A value of 1 retains information written to data extensions before the error occurs, even if the subscriber is skipped. A value of 0 does not retain information recorded before the error. This parameter refers to inserted, updated, upserted, or deleted information via AMPscript.\n\n========== EXAMPLES ==============\n\nRaiseError('An Error Occurred')\n"
	},
	"authenticatedmemberid": {
		"body": [
			"AuthenticatedMemberID()"
		],
		"prefix": "AuthenticatedMemberID",
		"description": "AuthenticatedMemberID()\n\nReturns the member ID of the authenticated landing page user. Use this function only with Microsites when using Sender Authenticated Redirection. Not for use with CloudPages.\n\n========== EXAMPLES ==============\n\nset @ID = AuthenticatedMemberID()\n"
	},
	"contentarea": {
		"body": [
			"ContentArea(${1:NUMERIC}, ${2:STRING}, ${3:BOOLEAN}, ${4:STRING}, ${5:NUMERIC})"
		],
		"prefix": "ContentArea",
		"description": "ContentArea(1, 2, 3, 4, 5)\n\nFor classic content, returns content contained in the specified stored content area. For Content Builder, use ContentBlockById.\n\n========== PARAMETERS ============\n\n1* [NUMERIC] \nThe ID of the content area to return\n\n2  [STRING] \nName of the impression region to start\n\n3  [BOOLEAN] \nDetermines whether the function returns an error when the system cannot locate the specified content area or returns an invalid content area. A value of true returns an error. A value of false does not return an error. Defaults to true.\n\n4  [STRING] \nDefault content to return if an error occurs. Defaults to an empty string.\n\n5  [NUMERIC] \nOutput parameter that returns the status of the call. A value of 0 indicates the function found the content area and successfully rendered the content. A value of -1 indicates either no content or an invalid content area.\n\n========== EXAMPLES ==============\n\n%%=ContentArea('14')=%%\n"
	},
	"executefilterorderedrows": {
		"body": [
			"ExecuteFilterOrderedRows(${1:STRING}, ${2:NUMERIC}, ${3:STRING})"
		],
		"prefix": "ExecuteFilterOrderedRows",
		"description": "ExecuteFilterOrderedRows(1, 2, 3)\n\nExecutes a predefined data filter and returns a rowset containing the results. You must use a data extension as the data source for the data filter. This function does not work with profile attributes. This function also allows you to control the sort order and maximum number of rows in the resulting rowset. Use this function only with landing pages and SMS messages.\n\n========== PARAMETERS ============\n\n1* [STRING] \nExternal key of data filter to execute\n\n2* [NUMERIC] \nMaximum number of rows to return. A value of 0 returns all rows.\n\n3* [STRING] \nName of column used to sort resulting rowset\n\n========== EXAMPLES ==============\n\nExecuteFilter('ExampleDataFilter',5,'IsActive')\n"
	},
	"contentblockbyname": {
		"body": [
			"ContentBlockbyName(${1:STRING}, ${2:STRING}, ${3:BOOLEAN}, ${4:STRING}, ${5:NUMERIC})"
		],
		"prefix": "ContentBlockbyName",
		"description": "ContentBlockbyName(1, 2, 3, 4, 5)\n\nReturns content contained in the specified stored content block or code snippet from Content Builder, including the Image Block type. These functions support email messages only. For text-only parts of the email, such as From Address, From Name, or Subject Line, reference the code snippet block.\n\n========== PARAMETERS ============\n\n1* [STRING] \nName of the content block to return\n\n2  [STRING] \nName of the impression region to start\n\n3  [BOOLEAN] \nDetermines whether the function returns an error when the system cannot locate the specified content area or returns an invalid content area. A value of true returns an error. A value of false does not return an error. Defaults to true.\n\n4  [STRING] \nDefault content to return if an error occurs. Defaults to an empty string.\n\n5  [NUMERIC] \nOutput parameter that returns the status of the call. A value of 0 indicates the function found the content area and successfully rendered the content. A value of -1 indicates either no content or an invalid content area.\n\n========== EXAMPLES ==============\n\n%%=ContentBlockByName(\"Content Builder\\Weekly Portfolio\")=%%\n"
	},
	"invokedelete": {
		"body": [
			"InvokeDelete(${1:OBJECT}, ${2:STRING}, ${3:NUMERIC}, ${4:OBJECT})"
		],
		"prefix": "InvokeDelete",
		"description": "InvokeDelete(1, 2, 3, 4)\n\nInvokes the Delete method on an API object. Returns the API status code.\n\n========== PARAMETERS ============\n\n1* [OBJECT] \nAPI object to delete\n\n2* [STRING] \nOutput parameter for API status message\n\n3* [NUMERIC] \nOutput parameter for API error code\n\n4  [OBJECT] \nDeleteOptions API object\n"
	},
	"dataextensionrowcount": {
		"body": [
			"DataExtensionRowCount(${1:STRING})"
		],
		"prefix": "DataExtensionRowCount",
		"description": "DataExtensionRowCount(1)\n\nReturns the number of rows in the specified data extension. Use this function in place of a Lookup() call when only counting the number of rows in a data extension.\n\n========== PARAMETERS ============\n\n1* [STRING] \nName of data extension from which to derive specified row count\n\n========== EXAMPLES ==============\n\nDataExtensionRowCount(\"example\")\n"
	},
	"livecontentmicrositeurl": {
		"body": [
			"LiveContentMicrositeURL(${1:STRING}, ${2:STRING})"
		],
		"prefix": "LiveContentMicrositeURL",
		"description": "LiveContentMicrositeURL(1, 2)\n\nProvides a way to return a microsite URL by referencing a coupon name hosted on a microsite.\n\n========== PARAMETERS ============\n\n1* [STRING] \nContent type - at this time, the only valid value for this argument is coupon\n\n2* [STRING] \nName of live content referenced\n\n========== EXAMPLES ==============\n\n%%=LiveContentMicrositeURL('coupon', 'MyCoupon')=%%\n"
	},
	"getpublishedsocialcontent": {
		"body": [
			"GetPublishedSocialContent(${1:STRING})"
		],
		"prefix": "GetPublishedSocialContent",
		"description": "GetPublishedSocialContent(1)\n\nReturns content to share on a social network as specified by the region ID. For use only in landing pages or the Social Forward feature.\n\n========== PARAMETERS ============\n\n1* [STRING] \nRegion ID for the social content area\n\n========== EXAMPLES ==============\n\nGetPublishedSocialContent('SocialRegion')\n"
	},
	"upsertde": {
		"body": [
			"UpsertDE(${1:STRING}, ${2:NUMERIC}, ${3:STRING}, ${4:STRING}, ${5:STRING}, ${6:STRING})"
		],
		"prefix": "UpsertDE",
		"description": "UpsertDE(1, 2, 3, 4, 5, 6)\n\nUpdates an existing row in a data extension for the specified number of filter columns listed in name value pairs followed by a list of columns to be updated in name and value pairs. If no data exists in that row, the function inserts a row. The function returns the number of affected rows. You can include multiple name and value pairs to build your WHERE and INSERT clauses. Use this function with email messages at send time only.\n\n========== PARAMETERS ============\n\n1* [STRING] \nName of data extension from which to update the specified row\n\n2* [NUMERIC] \nNumber of columns used to build WHERE clause\n\n3* [STRING] \nColumn name to build WHERE clause\n\n4* [STRING] \nValue used to build WHERE clause\n\n5* [STRING] \nColumn name to build INSERT clause\n\n6* [STRING] \nValue used to build INSERT clause\n\n========== EXAMPLES ==============\n\nUpsertDE('SendDE',1,'SubscriberKey',SubscriberKey,'DateSent',Now())\n"
	},
	"invokeretrieve": {
		"body": [
			"InvokeRetrieve(${1:OBJECT}, ${2:STRING}, ${3:STRING})"
		],
		"prefix": "InvokeRetrieve",
		"description": "InvokeRetrieve(1, 2, 3)\n\nReturns an array of API objects from a RetrieveRequest object.\n\n========== PARAMETERS ============\n\n1* [OBJECT] \nAPI object from which to return array of API objects\n\n2  [STRING] \nRetrieve call OverallStatus parameter value passed to previously defined AMPscript variable\n\n3  [STRING] \nRetrieve call RequestID parameter value passed to previously defined AMPscript variable\n\n========== EXAMPLES ==============\n\nSET @rr_1=CreateObject(\"RetrieveRequest\")\nSetObjectProperty(@rr_1,\"ObjectType\",\"Subscriber\")\nAddObjectArrayItem(@rr_1,\"Properties\",\"EmailAddress\")\nSET @sfp=CreateObject(\"SimpleFilterPart\")\nSetObjectProperty(@sfp,\"Property\",\"EmailAddress\")\nSetObjectProperty(@sfp,\"SimpleOperator\",\"equals\")\nAddObjectArrayItem(@sfp,\"Value\",@emailaddress)\nSetObjectProperty(@rr_1,\"Filter\",@sfp)\nSET @sub=InvokeRetrieve(@rr_1)\n"
	},
	"attachfile": {
		"body": [
			"AttachFile(${1:STRING}, ${2:STRING}, ${3:STRING}, ${4:BOOLEAN}, ${5:STRING}, ${6:STRING}, ${7:INT})"
		],
		"prefix": "AttachFile",
		"description": "AttachFile(1, 2, 3, 4, 5, 6, 7)\n\nAttaches a file to an outgoing email message and can include a link to the file when you view the email as a web page. Contact your Marketing Cloud account representative to enable AMPscript email attachments for your account before using this function. You can also contact your account representative to adjust the error threshold that causes the send job to stop prematurely. This feature helps prevent a single error from stopping the entire job.\n\n========== PARAMETERS ============\n\n1* [STRING] \nLocation from which to pull files. Valid values include HTTP, FTP, Portfolio (for Classic Portfolio), or ContentBuilder (for Content Builder).\n\n2* [STRING] \nLocation from which to pull attachments. 2088 characters maximum. Specify a URL if you select HTTP. Specify the name of the file in the Import folder of your Enhanced FTP site if you select FTP. Specify the external key if you select Portfolio or ContentBuilder.\n\n3  [STRING] \nName assigned to file when system attaches it to an email message. The function uses the original file name if you don't specify a new name. If you don't specify a value for the HTTP option, the function uses the Content-Disposition information from the HTTP header. If the server providing the file does not provide Content-Disposition information, the function uses an auto-generated value. For Content Builder, the file extension is dropped if you don't include the name and file extension.\n\n4  [BOOLEAN] \nIndicates whether a link to the attached file appears in View As A Web Page. Use only if string is HTTP.\n\n5  [STRING] \nURL of the attachment link to use for View As A Web Page. Use only if string is HTTP.\n\n6  [STRING] \nText for attachment link used in View As A Web Page. Use only if string is HTTP.\n\n7  [INT] \nNumber of days the link appears in View As A Web Page. Use only if string is HTTP.\n\n========== EXAMPLES ==============\n\n%%=AttachFile('HTTP','http://example.com/catalog.pdf',true,'http://example.com/catalog.pdf','Click here to download your catalog',4)=%%\n"
	},
	"httpget": {
		"body": [
			"HTTPGet(${1:STRING}, ${2:BOOLEAN}, ${3:INT}, ${4:STRING})"
		],
		"prefix": "HTTPGet",
		"description": "HTTPGet(1, 2, 3, 4)\n\nReturns the content from a specified URL. This function only works with HTTP on port 80 and HTTPS on port 443. Non-standard port assignments cause this function to fail. Marketing Cloud honors any character set returned in the HTTP headers via Content-Type. For example, you can use a UTF-8 encoded HTML file with Content-Type: text/html; charset=utf-8 included in the header. If the encoding is not specified in the header, the application assumes all returned data will be in the character set WindowsCodePage 1252. You can change this default by contacting your Marketing Cloud account representative.\n\n========== PARAMETERS ============\n\n1* [STRING] \nURL from which to return content\n\n2  [BOOLEAN] \nDefines whether the process continues on error. Defaults to false. A value of true ignores errors in process.\n\n3  [INT] \nDefines whether the function allows empty content. A value of 0 allows for empty content. A value of 1 returns an error. A value of 2 skips the subscriber.\n\n4  [STRING] \nOutput of function status. This function defaults to 0. A value of 0 indicates status is OK. A value of -1 indicates a missing URL. A value of -2 indicates an HTTP request error. A value of -3 indicates empty content; the function completed successfully but did not return any content.\n\n========== EXAMPLES ==============\n\nHTTPGet('http://www.example.com')\n"
	},
	"treatascontentarea": {
		"body": [
			"TreatAsContentArea(${1:STRING}, ${2:STRING}, ${3:STRING})"
		],
		"prefix": "TreatAsContentArea",
		"description": "TreatAsContentArea(1, 2, 3)\n\nTreats content retrieved from a data extension or other source as though it is fixed content coming from a content area.\n\n========== PARAMETERS ============\n\n1* [STRING] \nKey value used to identify the content specified in the second string. Use the same key to identify distinct text and HTML versions of the content, as the function treats a key in a text content as distinct from a key in a HTML context. The application processes all keys in a case-insensitive manner.\n\n2* [STRING] \nContent stored for an email send under the key specified in the first string. Retrieve content using the HTTPGET() or Lookup() AMPscript functions.\n\n3  [STRING] \nImpression region name for the virtual content area used for tracking purposes\n\n========== EXAMPLES ==============\n\n%%=TreatAsContentArea('VirtualCA1', Lookup('DEName', 'DEContentColumn','KeyField', KeyValue))=%%\n"
	},
	"getsocialpublishurl": {
		"body": [
			"GetSocialPublishURL(${1:NUMERIC}, ${2:STRING}, ${3:STRING}, ${4:STRING})"
		],
		"prefix": "GetSocialPublishURL",
		"description": "GetSocialPublishURL(1, 2, 3, 4)\n\nRetrieves the URL of a social network from a lookup table and creates a link to that social network for use with content to be shared from an email. The optional pairs of parameters refer to additional information like ShareThis publisher ID numbers and logins. You can include multiple name and value pairs. Use this function with the Social Forward feature.\n\n========== PARAMETERS ============\n\n1* [NUMERIC] \nNumber of the social network on the lookup table\n\n2* [STRING] \nName of the content area to share to the social network\n\n3  [STRING] \nName of optional parameter\n\n4  [STRING] \nValue of optional parameter\n\n========== EXAMPLES ==============\n\n<!-- RegionStart[ name:'Shared content region 1',\ntitle:'First shared email content',\ndescription:'This is an example of shared content',\ncsskey:'portfolio css 1'] -->\n<tablewidth='100%'bgcolor='#FFFFFF'border='0'bordercolor=''cellpadding='5'cellspacing='0'>\n<tr>\n<tdstyle='font-family:Arial; font-size:13px'>\n<imgsrc='http://example.com/images/logo.jpg' title='logo'align='left'border='0'/>\n<p id='text-placeholder'style='margin-top: 0px; margin-bottom: 0px;'>This is an example of a shared content area!&amp;nbsp; Please feel free to pass on this information!<br/>\n<br/></p>\n<!-- Creates a link to share this content with facebook -->\n<a href='%%=GetSocialPublishURL('1','Shared content region 1')=%%'\nalias='Social Forward to Facebook'\ntitle='Publish to Facebook'>\n<img src='http://images.dev2.et.local/lib/ffcf14/m/1/social_default_facebook_icon.jpg' alt='Facebook' title='Facebook' border='0'></a>\n</td>\n</tr>\n</table>\n<!-- RegionEnd[ name:'Shared content region 1'] -->\n"
	},
	"deletedata": {
		"body": [
			"DeleteData(${1:STRING}, ${2:STRING}, ${3:STRING})"
		],
		"prefix": "DeleteData",
		"description": "DeleteData(1, 2, 3)\n\nDeletes rows in a data extension with column values specified in name value pairs. Returns the number of rows affected. You can also use this function with SMS data.\n\n========== PARAMETERS ============\n\n1* [STRING] \nName of data extension from which to delete specified row\n\n2* [STRING] \nName of column used to identify rows to delete.\n\n3* [STRING] \nValue used to identify rows to delete.\n\n========== EXAMPLES ==============\n\nDeleteData('SendDE','_SubscriberKey','12345')\n"
	},
	"subtract": {
		"body": [
			"Subtract(${1:NUMERIC}, ${2:NUMERIC})"
		],
		"prefix": "Subtract",
		"description": "Subtract(1, 2)\n\nReturns the difference of two integers.\n\n========== PARAMETERS ============\n\n1* [NUMERIC] \nInitial numeric value\n\n2* [NUMERIC] \nNumber to subtract from initial value\n\n========== EXAMPLES ==============\n\n%%=Subtract(@abc,@def)=%%\n"
	},
	"md5": {
		"body": [
			"MD5(${1:STRING}, ${2:STRING})"
		],
		"prefix": "MD5",
		"description": "MD5(1, 2)\n\nConverts a string to a 16-byte MD5 hash value. This function returns a hex representation of the 16-byte MD5 hash result. This one-way hash conversion does not allow later decryption.\n\n========== PARAMETERS ============\n\n1* [STRING] \nString to convert to hex representation of the 16-byte MD5 hash result\n\n2  [STRING] \nCharacter set to use for the encoding. This function defaults to UTC-8 if not specified. You can also specify UTC-16.\n\n========== EXAMPLES ==============\n\nMD5('This is a string.')\n"
	},
	"invokeperform": {
		"body": [
			"InvokePerform(${1:OBJECT}, ${2:STRING}, ${3:VARIABLE})"
		],
		"prefix": "InvokePerform",
		"description": "InvokePerform(1, 2, 3)\n\nInvokes the Perform method on an API object. Returns the API status code.\n\n========== PARAMETERS ============\n\n1* [OBJECT] \nAPI object to perform\n\n2* [STRING] \nAction to perform, with valid parameter values varying depending on object type\n\n3  [VARIABLE] \nOutput parameter for API status message\n"
	},
	"attributevalue": {
		"body": [
			"AttributeValue(${1:STRING})"
		],
		"prefix": "AttributeValue",
		"description": "AttributeValue(1)\n\nReturns the value of a subscriber attribute.\n\n========== PARAMETERS ============\n\n1* [STRING] \nName of attribute to return\n\n========== EXAMPLES ==============\n\nVAR @AttributeName, @AttributeValue\nSET @AttributeName = Lookup('PostalCode','zipcode','PostalCode',Indianapolis)\nSET @AttributeValue = AttributeValue(@AttributeName)\n"
	},
	"rowcount": {
		"body": [
			"RowCount(${1:STRING})"
		],
		"prefix": "RowCount",
		"description": "RowCount(1)\n\nReturns number of rows in specified rowset or array\n\n========== PARAMETERS ============\n\n1* [STRING] \nSpecified rowset\n\n========== EXAMPLES ==============\n\n%%=RowCount(LookupRows('PostalCode','City','Indianapolis'))=%%\n"
	},
	"length": {
		"body": [
			"Length(${1:STRING})"
		],
		"prefix": "Length",
		"description": "Length(1)\n\nReturns the number of characters in the specified string.\n\n========== PARAMETERS ============\n\n1* [STRING] \nString to evaluate\n\n========== EXAMPLES ==============\n\n%%=Length(@abc)=%%\n"
	},
	"authenticatedenterpriseid": {
		"body": [
			"AuthenticatedEnterpriseID()"
		],
		"prefix": "AuthenticatedEnterpriseID",
		"description": "AuthenticatedEnterpriseID()\n\nReturns the enterprise ID of the authenticated landing page user. Use this function only with Microsites when using Sender Authenticated Redirection. Not for use with CloudPages.\n\n========== EXAMPLES ==============\n\nset @ID = AuthenticatedEnterpriseID()\n"
	},
	"upsertmscrmrecord": {
		"body": [
			"UpsertMscrmRecord(${1:STRING}, ${2:STRING}, ${3:STRING}, ${4:STRING}, ${5:STRINGA}, ${6:STRING}, ${7:STRING}, ${8:STRINGA}, ${9:STRING})"
		],
		"prefix": "UpsertMscrmRecord",
		"description": "UpsertMscrmRecord(1, 2, 3, 4, 5, 6, 7, 8, 9)\n\nThis function retrieves a single record from Microsoft Dynamics CRM, using the name and value pairs to filter the results. The function then sorts the results using the sort field and order provided. The process updates a found record with the applicable name and value pairs. If the process does not find a record, it creates one with all provided name and value pairs. This function returns the GUID of the updated or created record.\n\n========== PARAMETERS ============\n\n1* [STRING] \nThe name of the Dynamics CRM entity for the record to upsert\n\n2* [STRING] \nThe field used to sort the retrieve results\n\n3* [STRING] \nThe order used to sort the retrieve results\n\n4* [STRING] \nThe number of Name/Value pairs of fields used to retrieve\n\n5* [STRINGA] \nName of attribute to filter on the target entity\n\n6* [STRING] \nValue of attribute to filter on the target entity\n\n7* [STRING] \nThe number of Name/Value pairs of fields used to update\n\n8* [STRINGA] \nName of attribute to update on the target entity\n\n9* [STRING] \nValue of attribute to update on the target entity\n\n========== EXAMPLES ==============\n\nUpsertMscrmRecord(\"account\",\"createdon\",\"DESC\",1,\"name\",\"MarketingCloud\",1,\"address1_city\",\"Indianapolis\")\n"
	},
	"divide": {
		"body": [
			"Divide(${1:NUMERIC}, ${2:NUMERIC})"
		],
		"prefix": "Divide",
		"description": "Divide(1, 2)\n\nReturns the result of dividing the first argument by the second argument.\n\n========== PARAMETERS ============\n\n1* [NUMERIC] \nDividend value\n\n2* [NUMERIC] \nDivisor value, used to divide the dividend value\n\n========== EXAMPLES ==============\n\n%%=Divide(@abc,@def)=%%\n"
	},
	"buildoptionlist": {
		"body": [
			"BuildOptionList(${1:STRING}, ${2:STRING}, ${3:STRING})"
		],
		"prefix": "BuildOptionList",
		"description": "BuildOptionList(1, 2, 3)\n\nBuilds a list of options from which a message recipient can select. Repeat value and presentation names for all options on the list.\n\n========== PARAMETERS ============\n\n1* [STRING] \nOption selected by default\n\n2* [STRING] \nValue of first option on list\n\n3* [STRING] \nPresentation name of first option on list\n\n========== EXAMPLES ==============\n\nSET @AttribA=2\n%%=BuildOptionList(AttribA, '1', 'One', '2', 'Two', '3', 'Three')=%%\n"
	},
	"datediff": {
		"body": [
			"DateDiff(${1:DATE}, ${2:DATE}, ${3:STRING})"
		],
		"prefix": "DateDiff",
		"description": "DateDiff(1, 2, 3)\n\nReturns the difference between two dates.\n\n========== PARAMETERS ============\n\n1* [DATE] \nStarting date for comparison using either MM/dd/yyyy or YYYY-MM-DD format\n\n2* [DATE] \nDate to subtract from starting date using either MM/dd/yyyy or YYYY-MM-DD format\n\n3* [STRING] \nUnit of time of the difference. Valid values include Y, M, D, H, or MI\n\n========== EXAMPLES ==============\n\n%%=DateDiff(@tomorrow,@today, 'D')=%%\n"
	},
	"image": {
		"body": [
			"Image(${1:STRING}, ${2:STRING})"
		],
		"prefix": "Image",
		"description": "Image(1, 2)\n\nReturns an img tag with the src attribute containing the path to an image from your portfolio. Identify the image to include with the external key value. The img tag includes the title and alt information for the selected image, as well as a border value measured in pixels and any identified thid value.\n\n========== PARAMETERS ============\n\n1* [STRING] \nExternal key value of the image in your Portfolio\n\n2  [STRING] \nExternal key value of a default image if the function does not find the first image parameter\n\n========== EXAMPLES ==============\n\n%%=Image('CorpLogo','DefaultImage')=%%\n"
	},
	"replace": {
		"body": [
			"Replace(${1:STRING}, ${2:STRING}, ${3:STRING})"
		],
		"prefix": "Replace",
		"description": "Replace(1, 2, 3)\n\nReplaces the first string value with the second string value anywhere it is found in the variable.\n\n========== PARAMETERS ============\n\n1* [STRING] \nVariable with value to replace\n\n2* [STRING] \nString to replace\n\n3* [STRING] \nString used as replacement\n\n========== EXAMPLES ==============\n\n%%=Replace(@name,'2007','2008')=%%\n"
	},
	"isnull": {
		"body": [
			"IsNull(${1:STRING})"
		],
		"prefix": "IsNull",
		"description": "IsNull(1)\n\nReturns a true value if the specified parameter is null.\n\n========== PARAMETERS ============\n\n1* [STRING] \nFunction or variable that returns a nullor non-null result.\n\n========== EXAMPLES ==============\n\nIsNull(@Row)\n"
	},
	"upsertcontact": {
		"body": [
			"UpsertContact(${1:STRING}, ${2:STRING}, ${3:STRING}, ${4:STRING}, ${5:STRING})"
		],
		"prefix": "UpsertContact",
		"description": "UpsertContact(1, 2, 3, 4, 5)\n\nUpdates an existing contact in the specified channel with the specified primary key and primary key value. List as many attribute name and attribute values as necessary.\n\n========== PARAMETERS ============\n\n1* [STRING] \nThe channel to update for a contact. Possible values include: mobile\n\n2* [STRING] \nPrimary key type used to locate contact. Possible values include: phone\n\n3* [STRING] \nValue of primary key used to locate contact\n\n4* [STRING] \nName of attribute to upsert\n\n5* [STRING] \nValue of attribute to upsert\n\n========== EXAMPLES ==============\n\n%%[\nSet @result = UpsertContact('mobile','phone',MOBILE_NUMBER,'_ZipCode','12342')\n]%%\n"
	},
	"base64encode": {
		"body": [
			"Base64Encode(${1:STRING})"
		],
		"prefix": "Base64Encode",
		"description": "Base64Encode(1)\n\nEncodes human-readable text into Base64 information.\n\n========== PARAMETERS ============\n\n1* [STRING] \nTLocation of text to encrypt, either in a variable or data either in variable or data extension field via Lookup() AMPscript function\n\n========== EXAMPLES ==============\n\n%%[\nVAR @normalStr, @encodedStr\nSET @normalStr = Lookup('ForBase64Info', 'ReceiptData', 'ReceiptKey', 1)\nSET @encodedStr = Base64Encode(@normalStr)\n]%%\n"
	},
	"localdatetosystemdate": {
		"body": [
			"LocalDateToSystemDate(${1:STRING})"
		],
		"prefix": "LocalDateToSystemDate",
		"description": "LocalDateToSystemDate(1)\n\nConverts a local datetime string or object to the system time.\n\n========== PARAMETERS ============\n\n1* [STRING] \nLocal time to convert\n\n========== EXAMPLES ==============\n\n%%[\nVAR @currentSystemTime\nSET @currentSystemTime = NOW()\n]%%\nLocal Time For User:  %%=SystemDateToLocalDate(@currentSystemTime)=%% \nConverted Back to System Time %%=LocalDateToSystemDate(@currentSystemTime)=%%\n"
	},
	"contentimagebyid": {
		"body": [
			"ContentImagebyID(${1:NUMERIC}, ${2:STRING})"
		],
		"prefix": "ContentImagebyID",
		"description": "ContentImagebyID(1, 2)\n\nReturns an img tag with the src attribute containing the path to an image from Content Builder. Identify the image to include with the ID value. The img tag includes the title and alt information for the selected image, as well as a border value (measured in pixels) and any identified thid value. If the value of the first parameter does not link to a valid image, you can include another image value for the second parameter as a default option. Use only with Image-type content in Content Builder. This function does not work with the Image Block type.\n\n========== PARAMETERS ============\n\n1* [NUMERIC] \nID of image to return\n\n2* [STRING] \nValue used to return image if function cannot find the original image ID\n\n========== EXAMPLES ==============\n\n%%=ContentImagebyID(\"180342\",\"DefaultImage\")=%%\n"
	},
	"guid": {
		"body": [
			"GUID()"
		],
		"prefix": "GUID",
		"description": "GUID()\n\nReturns a new GUID as a string value.\n\n========== EXAMPLES ==============\n\nvar @myGUID\nset @myGUID = GUID()\n"
	},
	"isemailaddress": {
		"body": [
			"IsEmailAddress(${1:STRING})"
		],
		"prefix": "IsEmailAddress",
		"description": "IsEmailAddress(1)\n\nReturns a true or false result indicating whether the string value passed in contains a valid email address. This function uses the same email validation logic as the rest of the application.\n\n========== PARAMETERS ============\n\n1* [STRING] \nEmail address to validate\n\n========== EXAMPLES ==============\n\nIsEmailAddress('joe@example.com')\n"
	},
	"barcodeurl": {
		"body": [
			"BarCodeURL(${1:STRING}, ${2:STRING}, ${3:NUMERIC}, ${4:NUMERIC}, ${5:STRING}, ${6:BOOLEAN}, ${7:STRING}, ${8:INT}, ${9:BOOLEAN})"
		],
		"prefix": "BarCodeURL",
		"description": "BarCodeURL(1, 2, 3, 4, 5, 6, 7, 8, 9)\n\nGenerates the specified barcode using supplied information. This function does not support matrix (2-D) barcodes such as QR codes. Use this function a maximum of two times per each single message or landing page.\n\n========== PARAMETERS ============\n\n1* [STRING] \nValue to convert into a bar code\n\n2* [STRING] \nType of bar code to create.\n\n3* [NUMERIC] \nWidth of bar code in pixels\n\n4* [NUMERIC] \nHeight of bar code in pixels\n\n5  [STRING] \nChecksum value for bar code\n\n6  [BOOLEAN] \nDisplay bar code value from string as text. A value of 0 displays provided alt text. A value of 1 displays barcode value as text.\n\n7  [STRING] \nAlt text to display if ordinal 6 contains a value of 1\n\n8* [INT] \nOrientation of the bar code. A value of 0 displays barcode horizontally. A value of 90 rotates the barcode 90 degrees to the right. A value of 180 rotates the barcode 180 degrees. A value of 270 rotates the barcode 90 degrees to the left.\n\n9* [BOOLEAN] \nDisplay a transparent background for the barcode. A value of 0 does not display a transparent background. A value of 1 displays a transparent background.\n\n========== EXAMPLES ==============\n\n<p>\n<img style='width: 400px; height: 200px' title=barcode border=0 hspace=0 alt=barcode src='%%=BarCodeURL('BBY01-397101069285','Code39', 400, 200, 0)=%%' width=400 height=200>\n</p>\n"
	},
	"invokeexecute": {
		"body": [
			"InvokeExecute(${1:OBJECT}, ${2:VARIABLE}, ${3:VARIABLE})"
		],
		"prefix": "InvokeExecute",
		"description": "InvokeExecute(1, 2, 3)\n\nInvokes the Execute method on an API object. Returns the API status code.\n\n========== PARAMETERS ============\n\n1* [OBJECT] \nAPI object to execute\n\n2  [VARIABLE] \nOutput parameter used to obtain status\n\n3  [VARIABLE] \nOutput parameter used to obtain request ID\n\n========== EXAMPLES ==============\n\nSET @lue = CreateObject('ExecuteRequest')\nSetObjectProperty(@lue,'Name','LogUnsubEvent')\n\nSET @lue_prop = CreateObject('APIProperty')\nSetObjectProperty(@lue_prop, 'Name', 'SubscriberKey')\nSetObjectProperty(@lue_prop, 'Value', @SubscriberID)\nAddObjectArrayItem(@lue, 'Parameters', @lue_prop)\n\nSET @lue_prop = CreateObject('APIProperty')\nSetObjectProperty(@lue_prop, 'Name', 'JobID')\nSetObjectProperty(@lue_prop, 'Value', @JobID)\nAddObjectArrayItem(@lue, 'Parameters', @lue_prop)\n\nSET @lue_prop = CreateObject('APIProperty')\nSetObjectProperty(@lue_prop, 'Name', 'ListID')\nSetObjectProperty(@lue_prop, 'Value', @ListID)\nAddObjectArrayItem(@lue, 'Parameters', @lue_prop)\n\nSET @lue_prop = CreateObject('APIProperty')\nSetObjectProperty(@lue_prop, 'Name', 'BatchID')\nSetObjectProperty(@lue_prop, 'Value', @BatchID)\nAddObjectArrayItem(@lue, 'Parameters', @lue_prop)\n\nSET @lue_prop = CreateObject('APIProperty')\nSetObjectProperty(@lue_prop, 'Name', 'Reason')\nSetObjectProperty(@lue_prop, 'Value', 'Custom Unsubscribe Page')\nAddObjectArrayItem(@lue, 'Parameters', @lue_prop)\n\nSET @lue_statusCode = InvokeExecute(@lue, @overallStatus, @requestId)\nSET @Response = Row(@lue_statusCode, 1)\nSET @Status = Field(@Response,'StatusMessage')\nSET @Error = Field(@Response,'ErrorCode')\n\nIF (@Error == '12012') OR (@Error == '401') OR (@Status == 'Event posted') THEN\n/* Succeeded */\nELSE\n/* Failed */\nENDIF\n"
	},
	"updatemscrmrecords": {
		"body": [
			"UpdateMscrmRecords(${1:STRING}, ${2:STRING}, ${3:STRING}, ${4:STRING})"
		],
		"prefix": "UpdateMscrmRecords",
		"description": "UpdateMscrmRecords(1, 2, 3, 4)\n\nUpdates one or more records in a Microsoft Dynamics CRM entity. Also returns the number of succesfully updated records. Include multiple name and value pairs for attributes to update on the target records as necessary.\n\n========== PARAMETERS ============\n\n1* [STRING] \nName of Microsoft Dynamics CRM entity receiving the updated records\n\n2* [STRING] \nComma-separated list of record GUIDs to update\n\n3* [STRING] \nName of attribute to update on target records\n\n4* [STRING] \nValue of attribute to update on target records\n\n========== EXAMPLES ==============\n\n%%[\n/* Sample Code - this updates several lead records to have Web as a Lead Source Code in Dynamics CRM */\nvar @records_updated\nset @records_updated = updatemscrmrecords('lead', '2E438216-2DEE-DD11-AB3E-005056AD58C4,0A167EEC-6436-DD11-B7BE-000E7F30252C', 'leadsourcecode', '8')\n]%%\n<p>Count of records updated:</p><br>\n%%=v(@records_updated)=%%\n"
	},
	"buildrowsetfromstring": {
		"body": [
			"BuildRowSetFromString(${1:STRING}, ${2:STRING})"
		],
		"prefix": "BuildRowSetFromString",
		"description": "BuildRowSetFromString(1, 2)\n\nCreates a rowset from a character string by splitting the string at the specified delimiter.\n\n========== PARAMETERS ============\n\n1* [STRING] \nValue used to create rowset\n\n2* [STRING] \nCharacter used as delimiter, such as a comma.\n\n========== EXAMPLES ==============\n\nBuildRowsetFromString('123|456|789', '|')\n"
	},
	"setobjectproperty": {
		"body": [
			"SetObjectProperty(${1:OBJECT}, ${2:STRING}, ${3:STRING})"
		],
		"prefix": "SetObjectProperty",
		"description": "SetObjectProperty(1, 2, 3)\n\nSets a value for an object created by the CreateObject function.\n\n========== PARAMETERS ============\n\n1* [OBJECT] \nAPI object receiving assigned value\n\n2* [STRING] \nName of property assigned\n\n3* [STRING] \nValue of property assigned\n\n========== EXAMPLES ==============\n\nSET @subscriber=CreateObject('Subscriber')\nSetObjectProperty(@subscriber,'EmailAddress','user@example.com')\n"
	},
	"formatdate": {
		"body": [
			"FormatDate(${1:STRING}, ${2:STRING}, ${3:STRING}, ${4:STRING})"
		],
		"prefix": "FormatDate",
		"description": "FormatDate(1, 2, 3, 4)\n\nFormats a specified string as a date value.\n\n========== PARAMETERS ============\n\n1* [STRING] \nValue to receive the specified formatting using either MM/dd/yyyy or YYYY-MM-DD format\n\n2  [STRING] \nDate format string used to format the specified value. A value of l returns a long text value. A value of s returns a short text value. A value of iso returns an ISO-compliant value. A value of rfc returns a RFC-1123-compliant value.\n\n3  [STRING] \nTime format string used the formation the specified value\n\n4  [STRING] \nCulture code used to indicate the correct date format\n\n========== EXAMPLES ==============\n\n%%=FormatDate(\"2012-10-05 03:21:34.567890\", \"MMM DD, YYYY\", \"HH:MM:SS.MMM\", \"en-US\")=%%\n"
	},
	"retrievemscrmrecordsfetchxml": {
		"body": [
			"RetrieveMscrmRecordsFetchXML(${1:STRING})"
		],
		"prefix": "RetrieveMscrmRecordsFetchXML",
		"description": "RetrieveMscrmRecordsFetchXML(1)\n\nTakes a correctly formed Fetch XML query and returns the attributes specified in the query.\n\n========== PARAMETERS ============\n\n1* [STRING] \nDynamics CRM Fetch XML query\n\n========== EXAMPLES ==============\n\nSET @FetchXML = concat('<fetch mapping='logical' count='1' version='1.0'> <entity name='contact'> <attribute name='contactid' /> <attribute name='emailaddresstring' /> <attribute name='firstname' /> <attribute name='lastname' /> <filter> <condition attribute='contactid' operator='eq' value='', @SubscriberKey, '' /> </filter> </entity></fetch>') \nSET @RowSet_All = RetrieveMscrmRecordsFetchXML(@FetchXML) \nIF Rowcount(@RowSet_All) >= 1 Then\n    SET @RowSet = Row(@RowSet_All, 1)\n    SET @contactid = Field(@Rowset,'contactid', 0)\n    SET @emailaddresstring = Field(@Rowset,'emailaddresstring', 0)\n    SET @firstname = Field(@Rowset,'firstname', 0)\n    SET @lastname = Field(@Rowset,'lastname', 0)\nENDIF\n"
	},
	"sha512": {
		"body": [
			"SHA512(${1:STRING}, ${2:STRING})"
		],
		"prefix": "SHA512",
		"description": "SHA512(1, 2)\n\nReturns an SHA512 hash tag based on the string value passed through the function.\n\n========== PARAMETERS ============\n\n1* [STRING] \nAlphanumeric string from which SHA512 hash tag derives\n\n2  [STRING] \nThe character set to use for the encoding; this function defaults to UTF-8 if not specified. You can also specify UTF-16.\n\n========== EXAMPLES ==============\n\n%%=SHA512('Insert Text Here','UTF-16')=%%\n"
	},
	"executefilter": {
		"body": [
			"ExecuteFilter(${1:STRING})"
		],
		"prefix": "ExecuteFilter",
		"description": "ExecuteFilter(1)\n\nExecutes a predefined data filter and returns a rowset containing the results. Use this function only in landing page contexts. You must use a data extension as the data source for the data filter. This function does not work with profile attributes.\n\n========== PARAMETERS ============\n\n1* [STRING] \nExternal key of data filter to execute\n\n========== EXAMPLES ==============\n\nExecuteFilter('ExampleDataFilter')\n"
	},
	"redirectto": {
		"body": [
			"RedirectTo(${1:STRING})"
		],
		"prefix": "RedirectTo",
		"description": "RedirectTo(1)\n\nAllows a client to specify the target of a link originate from a complete URL stored in an attribute, data extension field, or variable. Only use this function in HTML emails within the href attribute of an <a< tag. In text emails, include the prefix http:// and ensure you use no spaces within the parentheses. In order to retain tracking information for clicked links, you must include the anchor tags <a</a< within the email itself and not the link retrieved via AMPscript. This function only provides tracking information for clickable links within an email message. You cannot retrieve tracking information when using this function with URLs stored in a variable or used as part of a query string parameter.\n\n========== PARAMETERS ============\n\n1* [STRING] \nURL sting or variable containing URL string to which to redirect\n\n========== EXAMPLES ==============\n\n%%[\nVar @rows, @link, @cntr, @type\nSet @rows=LookupRows('Vacation_Deals','CustomerID','123')\nFor @cntr=1 to Rowcount(@rows) do\nset @type=Field(Row(@rows, @cntr),'type')\nset @link=Field(Row(@rows, @cntr),'link')\n]%%\n<a href='%%=RedirectTo(@link)=%%'>%%=v(@type)=%%</a>\n%%[\nNext @cntr\n]%%\n"
	},
	"describemscrmentityattributes": {
		"body": [
			"DescribeMscrmEntityAttributes(entity)"
		],
		"prefix": "DescribeMscrmEntityAttributes",
		"description": "DescribeMscrmEntityAttributes(entity)\n\nreturns the logical name, display name, and type of the Dynamics CRM entity. The results include a comma-separated list of option and display values when the attribute contains a Boolean, status, picklist, or state value.\n\n========== PARAMETERS ============\n\nentity* [STRING] \nDynamics CRM entity from which to retrieve attributes\n\n========== EXAMPLES ==============\n\n%%[\n\nvar @fields_rs\n\nset @fields_rs = describemscrmentityattributes('lead')\n\n]%%\n\n<p> Here is a list of Fields in the Lead Entity </p>\n\n%%[\n\nvar @field_name, @field_displayname, @counter, @field_type, @field_required, @field_options\n\nfor @counter = 1 to rowcount(@fields_rs) do\n\nset @field_name = field(row(@fields_rs,@counter), 'Name')\n\nset @field_displayname = field(row(@fields_rs,@counter), 'DisplayName')\n\nset @field_type = field(row(@fields_rs,@counter), 'Type')\n\nset @field_required = field(row(@fields_rs,@counter), 'Required')\n\nset @field_options = field(row(@fields_rs,@counter), 'Options')\n\n]%%\n\nField Name: &nbsp; &nbsp; %%=v(@field_name)=%% <br>\n\nField Display Name: &nbsp; &nbsp; %%=v(@field_displayname)=%% <br>\n\nField Type: &nbsp; &nbsp; %%=v(@field_type)=%% <br>\n\nField Required?: &nbsp; &nbsp; %%=v(@field_required)=%% <br>\n\nField Options: &nbsp; &nbsp; %%=v(@field_options)=%% <br> <br><br>\n\n%%[ next @counter ]%%\n"
	},
	"iif": {
		"body": [
			"IIf(${1:STRING}, ${2:STRING}, ${3:STRING})"
		],
		"prefix": "IIf",
		"description": "IIf(1, 2, 3)\n\nReturns the second parameter if the first parameter evaluates True. Returns the third parameter if the first parameter evaluates False.\n\n========== PARAMETERS ============\n\n1* [STRING] \nAny function or expression that returns a true or false result.\n\n2* [STRING] \nValue to return if the expression evaluates True\n\n3* [STRING] \nValue to return if the expression evaluates False\n\n========== EXAMPLES ==============\n\n%%=IIF(EMPTY(@VAR),'123',@VAR)=%%\n"
	},
	"authenticatedemployeeusername": {
		"body": [
			"AuthenticatedEmployeeUserName()"
		],
		"prefix": "AuthenticatedEmployeeUserName",
		"description": "AuthenticatedEmployeeUserName()\n\nReturns the username of the authenticated landing page user. Use this function only with Microsites when using Sender Authenticated Redirection. Not for use with CloudPages.\n\n========== EXAMPLES ==============\n\nset @username = AuthenticatedEmployeeUserName()\n"
	},
	"upsertdata": {
		"body": [
			"UpsertData(${1:STRING}, ${2:NUMERIC}, ${3:STRING}, ${4:STRING}, ${5:STRING}, ${6:STRING})"
		],
		"prefix": "UpsertData",
		"description": "UpsertData(1, 2, 3, 4, 5, 6)\n\nUpdates an existing row in a data extension for the specified number of filter columns listed in name value pairs followed by a list of columns to be updated in name and value pairs. If no data exists in that row, the function inserts a row. The function returns the number of affected rows. You can include multiple name and value pairs to build your WHERE and INSERT clauses. Use this function with landing pages and SMS messages only.\n\n========== PARAMETERS ============\n\n1* [STRING] \nName of data extension from which to update the specified row\n\n2* [NUMERIC] \nNumber of columns used to build WHERE clause\n\n3* [STRING] \nColumn name to build WHERE clause\n\n4* [STRING] \nValue used to build WHERE clause\n\n5* [STRING] \nColumn name to build INSERT clause\n\n6* [STRING] \nValue used to build INSERT clause\n\n========== EXAMPLES ==============\n\nUpsertData('SendDE',1,'SubscriberKey',SubscriberKey,'DateSent',Now())\n"
	},
	"retrievesalesforcejobsources": {
		"body": [
			"RetrieveSalesforceJobSources(${1:NUMERIC})"
		],
		"prefix": "RetrieveSalesforceJobSources",
		"description": "RetrieveSalesforceJobSources(1)\n\nReturns a rowset with SourceID, SourceType, and IsInclusionSource columns from the job with the specified ID. This function works only with version 2 of the Salesforce integration with Marketing Cloud. This function does not return any information on the status of the job itself. For example, the function returns the same information from a completed job as it does from a job that was started and then canceled. Don't use this information as a guarantee that the send completed. Because this function returns data as a rowset, use Row() and Field() to evaluate the data.\n\n========== PARAMETERS ============\n\n1* [NUMERIC] \nnull\n"
	},
	"updatesinglesalesforceobject": {
		"body": [
			"UpdateSingleSalesforceObject(${1:STRING}, ${2:STRING}, ${3:STRING}, ${4:STRING})"
		],
		"prefix": "UpdateSingleSalesforceObject",
		"description": "UpdateSingleSalesforceObject(1, 2, 3, 4)\n\nUpdates a record in an object in your integrated Salesforce account. You can specify multiple additional field and value pairs as part of an AND clause. Returns 1 for success or 0 for failure.\n\n========== PARAMETERS ============\n\n1* [STRING] \nType of object to update, such as Lead or CustomObject.\n\n2* [STRING] \nThe ID of the object to update.\n\n3* [STRING] \nThe name of the field to update.\n\n4* [STRING] \nThe value to update the field with.\n\n========== EXAMPLES ==============\n\n%%[\nvar @result\nset @result = UpdateSingleSalesforceObject('Lead','00Q00003yAEj','Email','jcc@example.com')\n]%%\nThe system updates the Email field on the Lead with ID 00Q00003yAEj to contain jcc@example.com.\n"
	},
	"httppost2": {
		"body": [
			"HTTPPost2(${1:STRING}, ${2:STRING}, ${3:STRING}, ${4:STRING}, ${5:STRING}, ${6:STRING}, ${7:STRING}, ${8:STRING})"
		],
		"prefix": "HTTPPost2",
		"description": "HTTPPost2(1, 2, 3, 4, 5, 6, 7, 8)\n\nThis function posts content to the specified URL. This function only works with HTTP on port 80 and HTTPS on port 443. Non-standard port assignments cause this function to fail. The Marketing Cloud honors any character set returned in the HTTP headers via Content-Type. For example, you can use a UTF-8 encoded HTML file with Content-Type: text/html; charset=utf-8 included in the header. If the header does not specify the encoding type, the application assumes all returned data uses the character set WindowsCodePage 1252. Change this default by contacting your Marketing Cloud account representative. Include as many name and value pairs as necessary.\n\n========== PARAMETERS ============\n\n1* [STRING] \nURL to receive posted content\n\n2* [STRING] \nSpecified content-type header value\n\n3* [STRING] \nContent to post to specified URL\n\n4* [STRING] \nIndicates whether call returns an exception for error. True indicates the system returns an exception.\n\n5* [STRING] \nOutput parameter used to contain string representation for the status of the HTTP request, such as OK.\n\n6* [STRING] \nOutput parameter used to contain returned response body information from the HTTP POST request.\n\n7* [STRING] \nName of additional headers to add to HTTP POST request\n\n8* [STRING] \nValue of additional headers to add to HTTP POST request\n\n========== EXAMPLES ==============\n\n%%[var @output,@respheader]%%\n%%=HTTPPost2('http://www.example.com/','text/html', '', true, @output,@respheader, 'Authorization', 'Example', 'User-Agent', 'Example')=%%\nOutput: %%=v(@output)=%%\nHeader: %%=v(@respheader)=%%\n"
	},
	"lowercase": {
		"body": [
			"Lowercase(${1:STRING})"
		],
		"prefix": "Lowercase",
		"description": "Lowercase(1)\n\nReturns the specified value in all lowercase letters.\n\n========== PARAMETERS ============\n\n1* [STRING] \nSpecified string value\n\n========== EXAMPLES ==============\n\n%%=Lowercase(@name)=%%\n"
	},
	"getportfolioitem": {
		"body": [
			"GetPortfolioItem(${1:STRING})"
		],
		"prefix": "GetPortfolioItem",
		"description": "GetPortfolioItem(1)\n\nReturns the text value of a Portfolio item.\n\n========== PARAMETERS ============\n\n1* [STRING] \nExternal Key of the Portfolio item\n\n========== EXAMPLES ==============\n\nGetPortfolioItem('example.gif')\n"
	},
	"getsocialpublishurlbyname": {
		"body": [
			"GetSocialPublishURLByName(${1:STRING}, ${2:STRING}, ${3:STRING}, ${4:STRING}, value)"
		],
		"prefix": "GetSocialPublishURLByName",
		"description": "GetSocialPublishURLByName(1, 2, 3, 4, value)\n\nReturns the URL to the publish content page, including a site name, country code, a region ID, and optional pairs of parameter information, such as ShareThis ID information. Include mulitple name and value pairs. For use with the Social Forward feature of Marketing Cloud.\n\n========== PARAMETERS ============\n\n1* [STRING] \nName of the social network to which to share information\n\n2* [STRING] \nApplicable country code for the social network, as defined by the ISO\n\n3* [STRING] \nRegion ID of the content shared to the social network\n\n4* [STRING] \nName of optional parameter\n\nvalue* [STRING] \nValue of optional parameter\n\n========== EXAMPLES ==============\n\n<!-- RegionStart[ name:'Shared content region 1',\ntitle:'First shared email content',\ndescription:'This is an example of shared content',\ncsskey:'portfolio css 1'] -->\n<tablewidth='100%'bgcolor='#FFFFFF'border='0'bordercolor=''cellpadding='5'cellspacing='0'>\n<tr>\n<tdstyle='font-family:Arial; font-size:13px'>\n<imgsrc='http://example.com/images/logo.jpg' title='logo'align='left'border='0'/>\n<p id='text-placeholder'style='margin-top: 0px; margin-bottom: 0px;'>This is an example of a shared content area!&amp;nbsp; Please feel free to pass on this information!<br/>\n<br/></p>\n<!-- Creates a link to share this content with facebook -->\n<a href='%%=GetSocialPublishURLByName('Facebook','US','Shared content region 1')=%%' alias='Social Forward to Facebook' title='Publish to Facebook'>\n<img src='http://images.dev2.et.local/lib/ffcf14/m/1/social_default_facebook_icon.jpg' alt='Facebook' title='Facebook' border='0'></a>\n</td>\n</tr>\n</table>\n<!-- RegionEnd[ name:'Shared content region 1'] -->\n"
	},
	"createmscrmrecord": {
		"body": [
			"CreateMscrmRecord(${1:STRING}, ${2:STRING}, ${3:STRING}, ${4:STRING})"
		],
		"prefix": "CreateMscrmRecord",
		"description": "CreateMscrmRecord(1, 2, 3, 4)\n\nCreates a single Dynamics CRM record in the target entity. Returns the GUID of the created record. Include multiple name and value pairs as necessary.\n\n========== PARAMETERS ============\n\n1* [STRING] \nName of Dynamics CRM entity for record to create\n\n2* [STRING] \nNumber of name and value pairs of fields to populate on created record\n\n3* [STRING] \nName of attribute to populate on created record\n\n4* [STRING] \nValue of attribute to populate on created record\n\n========== EXAMPLES ==============\n\n%%[\n\n/* Sample Code - this creates a new Contact record */\n\nvar @contact_guid\n\nset @contact_guid = createmscrmrecord('contact', 3, 'firstname', 'bob', 'lastname', 'testcontact', 'emailaddress1', 'bob@example.com')\n\n]%%\n\n<p>GUID of new Contact:</p><br>\n\n%%=v(@contact_guid)=%%\n"
	},
	"empty": {
		"body": [
			"Empty(${1:STRING})"
		],
		"prefix": "Empty",
		"description": "Empty(1)\n\nReturns True if the value is the empty string or NULL.\n\n========== PARAMETERS ============\n\n1* [STRING] \nVariable to evaluate\n\n========== EXAMPLES ==============\n\nSET @abc=27\n%%=Empty(@abc)=%%\n"
	},
	"v": {
		"body": [
			"V(${1:STRING})"
		],
		"prefix": "V",
		"description": "V(1)\n\nOutputs the value of a variable.\n\n========== PARAMETERS ============\n\n1* [STRING] \nVariable containing value to return\n\n========== EXAMPLES ==============\n\n%%[\nVar @var1\nSet @var1='Hello'\n]%%\n<p>%%=v(@var1)=%%</p>\n"
	},
	"replacelist": {
		"body": [
			"ReplaceList(${1:STRING}, ${2:STRING}, ${3:STRING})"
		],
		"prefix": "ReplaceList",
		"description": "ReplaceList(1, 2, 3)\n\nSearches a string value for one or more string values you specify and replaces those values with another string value.\n\n========== PARAMETERS ============\n\n1* [STRING] \nString value to search\n\n2* [STRING] \nReplacement string\n\n3* [STRING] \nString values to replace using replacement string\n\n========== EXAMPLES ==============\n\nReplaceList('ABCDEFG', 'X', 'A', 'C', 'E', 'G')\n"
	},
	"stringtohex": {
		"body": [
			"StringToHex(${1:STRING}, ${2:STRING})"
		],
		"prefix": "StringToHex",
		"description": "StringToHex(1, 2)\n\nReturns the hex string of bytes that make up a string value.\n\n========== PARAMETERS ============\n\n1* [STRING] \nString to encode\n\n2* [STRING] \nCharacter set used for encoding. This function defaults to UTC-8 if not specified. You can also specify UTC-16.\n\n========== EXAMPLES ==============\n\nStringToHex('This is a string.')\n"
	},
	"trim": {
		"body": [
			"Trim(${1:STRING})"
		],
		"prefix": "Trim",
		"description": "Trim(1)\n\nReturns the value of the string parameter with the leading and trailing white space removed.\n\n========== PARAMETERS ============\n\n1* [STRING] \nString value\n\n========== EXAMPLES ==============\n\n%%=Trim('   Text   ')=%%\n"
	},
	"lookuprows": {
		"body": [
			"LookupRows(${1:STRING}, ${2:STRING}, ${3:STRING})"
		],
		"prefix": "LookupRows",
		"description": "LookupRows(1, 2, 3)\n\nReturns a rowset from a data extension where the field matches the specified value. Specify additional field value pairs as part of an AND clause. This function returns a maximum of 2000 rows. To better control the number or the order of returned rows, use the LookupOrderedRows() function. This limitation enhances script performance.\n\n========== PARAMETERS ============\n\n1* [STRING] \nName of data extension from which to return specified rows\n\n2* [STRING] \nColumn name used to identify rows to return\n\n3* [STRING] \nValue used to match rows to return\n\n========== EXAMPLES ==============\n\nLookupRows('ZipCode','City',HomeCity)\n"
	},
	"setstatemscrmrecord": {
		"body": [
			"SetStateMscrmRecord(${1:STRING}, ${2:STRING}, ${3:STRING}, ${4:STRING})"
		],
		"prefix": "SetStateMscrmRecord",
		"description": "SetStateMscrmRecord(1, 2, 3, 4)\n\nThis function sets state and status of the indicated record and provides -1 as the status value for the default status of the state. Returns no value. Some entities, including Opportunity, require special CRM requests to change their state. This function will not work for those entities.\n\n========== PARAMETERS ============\n\n1* [STRING] \nGUID of the record to set state and status for\n\n2* [STRING] \nName of Dynamics CRM entity\n\n3* [STRING] \nState to set, such as Active or Inactive\n\n4* [STRING] \nStatus to set, such as 0 or 1\n\n========== EXAMPLES ==============\n\n%%[\n\n/* sample code to change the state of an account to inactive */\nSetStateMscrmRecord(\"00000000-0000-0000-0000-000000000001\", \"account\", \"Inactive\", \"-1\")  \n\n]%%\n"
	},
	"invokeupdate": {
		"body": [
			"InvokeUpdate(${1:OBJECT}, ${2:VARIABLE}, ${3:VARIABLE}, ${4:STRING})"
		],
		"prefix": "InvokeUpdate",
		"description": "InvokeUpdate(1, 2, 3, 4)\n\nInvokes the Update method on an API object.\n\n========== PARAMETERS ============\n\n1* [OBJECT] \nText object for API object\n\n2  [VARIABLE] \nText status message\n\n3  [VARIABLE] \nNumeric error code required if you add additional text options in the following ordinal\n\n4  [STRING] \nAdditional text values\n\n========== EXAMPLES ==============\n\nSET @sub = CreateObject(\"Subscriber\")\nSetObjectProperty(@sub,\"EmailAddress\", @email)\nSetObjectProperty(@sub,\"SubscriberKey\", @subkey)\n\nSET @cid = CreateObject(\"ClientID\")\nSetObjectProperty(@cid, \"ID\", \"1234567\")\nSetObjectProperty(@cid, \"IDSpecified\", \"true\")\nSetObjectProperty(@sub, \"Client\", @cid)\n\nSetObjectProperty(@sub,\"Status\",\"Active\")\nSet @options = CreateObject(\"UpdateOptions\")\nSet @save = CreateObject(\"SaveOption\")\nSetObjectProperty(@save,\"SaveAction\",\"UpdateAdd\")\nSetObjectProperty(@save,\"PropertyName\",\"*\")\nAddObjectArrayItem(@options,\"SaveOptions\", @save)\n/* Here is where we actually update the Subscriber object */\nSet @update_sub = InvokeUpdate(@sub, @update_sub_status, @update_sub_errorcode, @options)\n"
	},
	"createobject": {
		"body": [
			"CreateObject(${1:STRING})"
		],
		"prefix": "CreateObject",
		"description": "CreateObject(1)\n\nReturns a new Marketing Cloud web service API object\n\n========== PARAMETERS ============\n\n1* [STRING] \nAPI object receiving the new item in text form\n\n========== EXAMPLES ==============\n\nSET @subscriber = CreateObject('Subscriber')\n"
	},
	"char": {
		"body": [
			"Char(${1:STRING}, ${2:NUMERIC})"
		],
		"prefix": "Char",
		"description": "Char(1, 2)\n\nReturns the ASCII character specified by the ASCII character code in the first parameter. An optional second parameter specifies the number of times to repeat the return of the ASCII character.\n\n========== PARAMETERS ============\n\n1* [STRING] \nASCII character code\n\n2* [NUMERIC] \nNumber of times to repeat the ASCII character\n\n========== EXAMPLES ==============\n\nChar(65)\n"
	},
	"endimpressionregion": {
		"body": [
			null
		],
		"prefix": "EndImpressionRegion",
		"description": "EndImpressionRegion\n\nIdentifies the end of a region to be tracked by impression tracking.\n"
	},
	"endsmsconversation": {
		"body": [
			"EndSmsConversation(${1:STRING}, ${2:STRING})"
		],
		"prefix": "EndSmsConversation",
		"description": "EndSmsConversation(1, 2)\n\nEnd any current conversation on an SMS response from an MO user. Use this AMPscript function for MobileConnect. You cannot use this function with conversation-based templates, including Double Opt-In or Info Capture. Becase this function always returns a true value, don't use this function as part of a decision-making workflow.\n\n========== PARAMETERS ============\n\n1* [STRING] \nShort code used for SMS communication\n\n2* [STRING] \nThe mobile number value used to end the conversation. You can use MOBILE_NUMBER to pass in the value as necessary.\n\n========== EXAMPLES ==============\n\n%%=EndSmsConversation(\"12345\",MOBILE_NUMBER)=%%\n"
	},
	"systemdatetolocaldate": {
		"body": [
			"SystemDateToLocalDate(${1:DATE})"
		],
		"prefix": "SystemDateToLocalDate",
		"description": "SystemDateToLocalDate(1)\n\nConverts a system datetime string or object to the Marketing Cloud user's local time.\n\n========== PARAMETERS ============\n\n1* [DATE] \nSystem time to convert\n\n========== EXAMPLES ==============\n\n%%[\nVAR @currentSystemTime\nSET @currentSystemTime = NOW()\n]%%\nLocal Time For User:  %%=SystemDateToLocalDate(@currentSystemTime)=%%\n"
	},
	"formatnumber": {
		"body": [
			"FormatNumber(${1:NUMERIC}, ${2:STRING}, ${3:STRING})"
		],
		"prefix": "FormatNumber",
		"description": "FormatNumber(1, 2, 3)\n\nThis function rounds decimal numbers up if the specified format uses fewer decimal points than the value itself and the remaining numbers are 5 or greater. The function rounds decimal numbers down if the specified format uses fewer decimal points than the value itself and the remaining numbers total less than 5. Integers outside the range of -9,223,372,036,854,775,808 to 9,223,372,036,854,775,807 print in scientific notation.\n\n========== PARAMETERS ============\n\n1* [NUMERIC] \nValue to receive the specified formatting.\n\n2* [STRING] \nValid format type value:\nC - Currency\nD - Decimal\nE - Exponential\nF - Fixed point\nG - General\nN - Number\nP - Percent\nR - Round-trip (format ensures value parsed to string can be parsed back to numeric value)\nX - Hexadecimal\nYou can optionally follow this code with a number to indicate the precision of the number. For example, a currency value with a precision of 2 uses the parameter C2.\n\n3  [STRING] \nCulture code used to indicate the correct date format\n\n========== EXAMPLES ==============\n\n%%=FormatNumber(1234.567,\"C2\",\"en-US\")=%%\n"
	},
	"isnulldefault": {
		"body": [
			"IsNullDefault(${1:STRING}, ${2:STRING})"
		],
		"prefix": "IsNullDefault",
		"description": "IsNullDefault(1, 2)\n\nReturns the test data when not null. If null, the function returns the specified value. Smart Capture forms use this function to return a default value for a blank or non-existent Smart Capture form value.\n\n========== PARAMETERS ============\n\n1* [STRING] \nValue to return for non-null occurrences\n\n2* [STRING] \nValue to return for null occurrences\n\n========== EXAMPLES ==============\n\nIsNullDefault(RequestParameter('ExampleParameter'), 'Null default value')\n"
	},
	"field": {
		"body": [
			"Field(${1:STRING}, ${2:STRING}, ${3:STRING})"
		],
		"prefix": "Field",
		"description": "Field(1, 2, 3)\n\nReturns the specified field in the specified row or property value from an API object\n\n========== PARAMETERS ============\n\n1* [STRING] \nRow from which to return the field, or object from which to return the attribute\n\n2* [STRING] \nName of the field or attribute to return\n\n3  [STRING] \nIndicates whether to return a NULL value or an error if the specified data extension field does not exist. Adding a `0` will return a `NULL` value if data extension field does not exist. Defaults to `1`.\n\n========== EXAMPLES ==============\n\n%%=Field(@row, 'City')=%%\n"
	},
	"lookup": {
		"body": [
			"Lookup(${1:STRING}, ${2:STRING}, ${3:STRING}, ${4:STRING})"
		],
		"prefix": "Lookup",
		"description": "Lookup(1, 2, 3, 4)\n\nReturns specified value from a data extension. You can specify multiple additional field and value pairs as part of an AND clause.\n\n========== PARAMETERS ============\n\n1* [STRING] \nName of data extension from which to return the specified value\n\n2* [STRING] \nName of column from which to return a value\n\n3* [STRING] \nName of column used to identify row containing lookup value\n\n4* [STRING] \nValue to match string against\n\n========== EXAMPLES ==============\n\n%%=Lookup('PostalCode','City','PostalCode',46016)=%%\n"
	},
	"insertde": {
		"body": [
			"InsertDE(${1:STRING}, ${2:STRING}, ${3:STRING})"
		],
		"prefix": "InsertDE",
		"description": "InsertDE(1, 2, 3)\n\nInserts a row in a data extension with the column values listed in name and value pairs. You can include multiple name and value pairs as necessary. Returns no value. Use this function with email messages at send time only. No value is returned. This function applies to email messages at send time only.\n\n========== PARAMETERS ============\n\n1* [STRING] \nName of the data extension from which to insert the specified row\n\n2* [STRING] \nColumn name used to build insert clause\n\n3* [STRING] \nColumn value used to build insert clause\n\n========== EXAMPLES ==============\n\nInsertDE('SomeDE','FirstName',FirstName, 'LastName',LastName, 'CreatedDate',NOW())\n"
	},
	"base64decode": {
		"body": [
			"Base64Decode(${1:STRING}, ${2:STRING}, ${3:INT})"
		],
		"prefix": "Base64Decode",
		"description": "Base64Decode(1, 2, 3)\n\nDecodes Base64 information into human-readable text.\n\n========== PARAMETERS ============\n\n1* [STRING] \nLocation of Base64 text, either in variable or data extension field via Lookup() AMPscript function\n\n2  [STRING] \n.NET-supported character type used in decoding process, such as UTF-8 or UTF-16\n\n3  [INT] \nIndicates whether the email send proceeds with incorrectly coded Base64 text. A value of 0 allows the send to proceed if send encounters an error. A value of 1 prevents the send from continuing if send encounters an error. Value defaults to 1.\n\n========== EXAMPLES ==============\n\n%%[\nVAR @encodedStr, @decodedStr\nSET @encodedStr = Lookup('Base64Info', 'ReceiptData', 'ReceiptKey', 1)\nSET @decodedStr = Base64Decode(@encodedStr,'UTF-8')\n]%%\nThe Lookup() function retrieves the Base64 information from the data extension, and the Base64Decode() decodes the Base64 information and assigns that value to the @decodedStr variable in UTF-8 format. If for some reason the value of @encodedStr is incorrect, the 1 at the end of the Base64Decode() function causes the send to fail due to the error.\n%%[\nVAR @encodedStr, @decodedStr\nSET @encodedStr = Lookup('Base64Info', 'ReceiptData', 'ReceiptKey', 0)\nSET @decodedStr = Base64Decode(@encodedStr,'UTF-8', 1)\n]%%\n"
	},
	"regexmatch": {
		"body": [
			"RegExMatch(${1:STRING}, ${2:STRING}, ${3:STRING}, ${4:STRING})"
		],
		"prefix": "RegExMatch",
		"description": "RegExMatch(1, 2, 3, 4)\n\nAllows you to use a regular expression to search for information in a string. Use any value from the .NET RegexOptions enumeration, such as IgnoreCase and Multiline.\n\n========== PARAMETERS ============\n\n1* [STRING] \nString to search\n\n2* [STRING] \nRegular expression to use in the search\n\n3* [STRING] \nName or ordinal of the matching group to return\n\n4* [STRING] \nRepeating string parameter of regular expression options to use\n\n========== EXAMPLES ==============\n\n%%[\nVAR @sourceStr, @regEx1, @regEx2\nSET @sourceStr = 'ABC_123_DEF_456';\n/* RegEx without group names */\nSET @regEx1 = '.*_([0-9]+)_.*_([0-9]+)'\n/* RegEx with group names */\nSET @regEx2 = '.*_(?<FirstNumber>[0-9]+)_.*_(?<SecondNumber>[0-9]+)'\n]%%\nBy Group ID:\nGroup 1:  %%=RegExMatch(@sourceStr, @regEx1, 1)=%%\nGroup 2:  %%=RegExMatch(@sourceStr, @regEx1, '2')=%%\nBy Group Name:\nFirst Number:   %%=RegExMatch(@sourceStr, @regEx2, 'FirstNumber')=%%\nSecond Number:  %%=RegExMatch(@sourceStr, @regEx2, 'SecondNumber')=%%\n%%[\n/* Check for possible match. */\nVAR @result\nSET @result = RegExMatch('ABC_dEF_GHI', '.*_(D..)_.*', 0, 'IgnoreCase', 'Multiline')\nIF Length(@result) > 0 THEN]%%\nMatched!\n%%[ ELSE ]%%\nNo match...\n%%[ ENDIF ]%%\n"
	},
	"datepart": {
		"body": [
			"DatePart(${1:DATE}, ${2:STRING})"
		],
		"prefix": "DatePart",
		"description": "DatePart(1, 2)\n\nReturns a specified part of a date.\n\n========== PARAMETERS ============\n\n1* [DATE] \nDate value used to retrieve a specified part using either MM/dd/yyyy or YYYY-MM-DD format\n\n2* [STRING] \nThe part of the date to retrieve. Valid values include Y, M, D, H, or MI\n\n========== EXAMPLES ==============\n\n%%=Datepart('5/1/2008','year')=%%\n"
	},
	"micrositeurl": {
		"body": [
			"MicrositeURL(${1:INT}, ${2:STRING}, ${3:STRING})"
		],
		"prefix": "MicrositeURL",
		"description": "MicrositeURL(1, 2, 3)\n\nProvides a way for Enterprise 2.0 users to reference a landing page URL in the top-level business unit in an Enterprise 2.0 account from an email message in any child business unit within the same Enterprise 2.0 account. Use this function in an email to pass information via a URL in an encrypted query string. For example, you could share a single unsubscription or profile center page from the top-level account for use in email messages sent from any child business units within that account. This method passes information in an encrypted query string without passing subscriber information or values in clear text.\n\n========== PARAMETERS ============\n\n1* [INT] \nPage ID for the landing page referenced in URL\n\n2  [STRING] \nName for additional parameters included in encrypted query string\n\n3  [STRING] \nValue for additional parameters included in encrypted query string\n\n========== EXAMPLES ==============\n\n<p>\n<a title=\"MyPage\" href=\"%%=MicrositeURL(77777)=%%\" alias=\"ThisAlias\" conversion=\"false\">Click to unsubscribe</a>\n</p>\n"
	},
	"outputline": {
		"body": [
			"OutputLine(value)"
		],
		"prefix": "OutputLine",
		"description": "OutputLine(value)\n\nReturns the results of AMPscript code executed within a code block, such as Concat() or V()), and includes the results inside the rendered content. The function also appends a CRLF following the results. The function does not return any passed direct literals.\n\n========== PARAMETERS ============\n\nvalue* [] \nThe code that produces the results to be output by the system\n\n========== EXAMPLES ==============\n\n%%[ var @output\nSet @output = \"My output\"\nOutputLine(Concat(@output,\" is a success!\")) ]%%\n"
	},
	"updatedata": {
		"body": [
			"UpdateData(${1:STRING}, ${2:NUMERIC}, ${3:STRING}, ${4:STRING}, ${5:STRING}, ${6:STRING})"
		],
		"prefix": "UpdateData",
		"description": "UpdateData(1, 2, 3, 4, 5, 6)\n\nUpdates an existing row in a data extension for the specified number of columns used to build the where clause listed in name value pairs followed by a list of columns to be updated in name value pairs. Returns the number of rows affected. Use this function with landing pages and SMS messages only.\n\n========== PARAMETERS ============\n\n1* [STRING] \nName of data extension from which to update the specified row\n\n2* [NUMERIC] \nNumber of columns used to build WHERE clause\n\n3* [STRING] \nColumn name to build WHERE clause\n\n4* [STRING] \nValue used to build WHERE clause\n\n5* [STRING] \nColumn name to build INSERT clause\n\n6* [STRING] \nValue used to build INSERT clause\n\n========== EXAMPLES ==============\n\nUpdateData('SendDE',1,'_SubscriberKey',_SubscriberKey,'DateSent',NOW())\n"
	},
	"multiply": {
		"body": [
			"Multiply(${1:NUMERIC}, ${2:NUMERIC})"
		],
		"prefix": "Multiply",
		"description": "Multiply(1, 2)\n\nReturns the product of multiplying two numbers.\n\n========== PARAMETERS ============\n\n1* [NUMERIC] \nFirst number\n\n2* [NUMERIC] \nSecond number\n\n========== EXAMPLES ==============\n\n%%=Multiply(@abc,@def)=%%\n"
	},
	"requestparameter": {
		"body": [
			"RequestParameter(queryParam)"
		],
		"prefix": "RequestParameter",
		"description": "RequestParameter(queryParam)\n\nReturns the value of a parameter passed into the query string of a landing page URL or passed via a form post.\n\n========== PARAMETERS ============\n\nqueryParam* [STRING] \nParameter from which to request value\n\n========== EXAMPLES ==============\n\nRequestParameter('ProductID')\n"
	},
	"concat": {
		"body": [
			"Concat(${1:STRING}, ${2:STRING})"
		],
		"prefix": "Concat",
		"description": "Concat(1, 2)\n\nConcatenates the strings specified in the arguments. Include as many values as necessary.\n\n========== PARAMETERS ============\n\n1* [STRING] \nFirst string value to concatenate\n\n2* [STRING] \nSecond string value to concatenate\n\n========== EXAMPLES ==============\n\n%%=Concat('a','b','c')=%%\n"
	},
	"invokecreate": {
		"body": [
			"InvokeCreate(${1:OBJECT}, ${2:STRING}, ${3:NUMERIC}, ${4:OBJECT})"
		],
		"prefix": "InvokeCreate",
		"description": "InvokeCreate(1, 2, 3, 4)\n\nInvokes the Create method on an API object. Returns the API status code.\n\n========== PARAMETERS ============\n\n1* [OBJECT] \nThe API object to be created\n\n2* [STRING] \nOutput parameter for the API status message\n\n3* [NUMERIC] \nOutput parameter for the API error code\n\n4  [OBJECT] \nCreateOptions API object\n\n========== EXAMPLES ==============\n\n%%[\nvar @emailaddr\nSET @emailaddr = 'help@example.com'\nSET @ts = CreateObject('TriggeredSend')\nSET @tsDef = CreateObject('TriggeredSendDefinition')\nSET @ts_subkey = @emailaddr\nSetObjectProperty(@tsDef, 'CustomerKey', 'VolConfirm')\nSetObjectProperty(@ts, 'TriggeredSendDefinition', @tsDef)\nSET @ts_sub = CreateObject('Subscriber')\nSetObjectProperty(@ts_sub, 'EmailAddress', @emailaddr)\nSetObjectProperty(@ts_sub, 'SubscriberKey', @ts_subkey)\nAddObjectArrayItem(@ts, 'Subscribers', @ts_sub)\nSET @ts_statusCode = InvokeCreate(@ts, @ts_statusMsg, @errorCode)\nIF @ts_statusCode != 'OK' THEN\nRaiseError(@ts_statusMsg, 0, @ts_statusCode, @errorCode)\nENDIF\n]%%\n"
	},
	"authenticatedmembername": {
		"body": [
			"AuthenticatedMemberName()"
		],
		"prefix": "AuthenticatedMemberName",
		"description": "AuthenticatedMemberName()\n\nReturns the member name of the authenticated landing page user. Use this function only with Microsites when using Sender Authenticated Redirection. Not for use with CloudPages.\n\n========== EXAMPLES ==============\n\nset @membername = AuthenticatedMemberName()\n"
	},
	"contentblockbyid": {
		"body": [
			"ContentBlockbyId(${1:NUMERIC}, ${2:STRING}, ${3:BOOLEAN}, ${4:STRING}, ${5:NUMERIC})"
		],
		"prefix": "ContentBlockById",
		"description": "ContentBlockbyId(1, 2, 3, 4, 5)\n\nFor classic content, returns content contained in the specified stored content area. For Content Builder, use ContentBlockById.\n\n========== PARAMETERS ============\n\n1* [NUMERIC] \nThe ID of the content block to return\n\n2  [STRING] \nName of the impression region to start\n\n3  [BOOLEAN] \nDetermines whether the function returns an error when the system cannot locate the specified content area or returns an invalid content area. A value of true returns an error. A value of false does not return an error. Defaults to true.\n\n4  [STRING] \nDefault content to return if an error occurs. Defaults to an empty string.\n\n5  [NUMERIC] \nOutput parameter that returns the status of the call. A value of 0 indicates the function found the content area and successfully rendered the content. A value of -1 indicates either no content or an invalid content area.\n\n========== EXAMPLES ==============\n\n%%=ContentBlockbyId(\"384201\")=%%\n"
	},
	"sha1": {
		"body": [
			"SHA1(${1:STRING}, ${2:STRING})"
		],
		"prefix": "SHA1",
		"description": "SHA1(1, 2)\n\nReturns a SHA1 hash based on the string value passed through the function. The SHA1 hash tag returns a hexidecimal value.\n\n========== PARAMETERS ============\n\n1* [STRING] \nAlphanumeric string from which SHA1 hash tag derives\n\n2  [STRING] \nCharacter set to use for the encoding. This function defaults to UTC-8 if not specified. You can also specify UTC-16.\n\n========== EXAMPLES ==============\n\n%%=SHA1(\"Insert Text Here\",\"UTF-16\")=%%\n"
	},
	"propercase": {
		"body": [
			"ProperCase(${1:STRING})"
		],
		"prefix": "ProperCase",
		"description": "ProperCase(1)\n\nReturns specified string with initial letter of each word capitalized.\n\n========== PARAMETERS ============\n\n1* [STRING] \nString to return with initial capitalization\n\n========== EXAMPLES ==============\n\n%%=ProperCase(@name)=%%\n"
	},
	"retrievemscrmrecords": {
		"body": [
			"RetrieveMscrmRecords(${1:STRING}, ${2:STRING}, ${3:STRING}, ${4:STRING}, ${5:STRING})"
		],
		"prefix": "RetrieveMscrmRecords",
		"description": "RetrieveMscrmRecords(1, 2, 3, 4, 5)\n\nRetrieves multiple CRM records. Use fields in the target entity or select fields from related entities by using many-to-one lookup attributes.\n\n========== PARAMETERS ============\n\n1* [STRING] \nName of Dynamics CRM entity from which to retrieve records\n\n2* [STRING] \nA comma-separated list of fields to retrieve\n\n3* [STRING] \nField name to check value\n\n4* [STRING] \nOperator to check value\n\n5* [STRING] \nValue to check\n\n========== EXAMPLES ==============\n\n%%[\n/* Sample Code - this retrieves all contacts where the first name is John */\nvar @records_retrieved, @counter, @firstname, @lastname, @id\nset @records_retrieved = retrievemscrmrecords('contact', 'contactid,firstname,lastname', 'firstname', '=', 'john')\n]%%\n<p>Contacts:</p><br><br>\n%%[\nfor @counter = 1 to rowcount(@records_retrieved) do\nset @firstname = field(row(@records_retrieved,@counter),'firstname')\nset @lastname = field(row(@records_retrieved,@counter),'lastname')\nset @id = field(row(@records_retrieved,@counter),'contactid')\n]%%\n<p>First: &amp;nbsp; &amp;nbsp; %%=v(@firstname)=%% </p>\n<p>Last: &amp;nbsp; &amp;nbsp; %%=v(@lastname)=%% </p>\n<p>Id: &amp;nbsp; &amp;nbsp; %%=v(@id)=%% </p>  <br><br>\n%%[next @counter ]%%\n"
	},
	"describemscrmentities": {
		"body": [
			"DescribeMscrmEntities()"
		],
		"prefix": "DescribeMscrmEntities",
		"description": "DescribeMscrmEntities()\n\nReturns the logical name and display name of all Microsoft Dynamics CRM entities\n\n========== EXAMPLES ==============\n\n%%[\n/* Sample code to get a list of all entities in a Dynamics CRM account to a record set */\nvar @entities_rs\nset @entities_rs = describemscrmentities()\n]%%\n<p> Here is a list of CRM Entities </p>\n%%[\nvar @entity_name, @entity_displayname, @counter\nfor @counter = 1 to rowcount(@entities_rs) do\nset @entity_name = field(row(@entities_rs,@counter), 'Name')\nset @entity_displayname = field(row(@entities_rs,@counter), 'DisplayName')\n]%%\nEntity Name: &amp;nbsp; &amp;nbsp; %%=v(@entity_name)=%% <br>\nEntity Display Name: &amp;nbsp; &amp;nbsp; %%=v(@entity_displayname)=%% <br> <br><br>\n%%[ next @counter ]%%\n"
	},
	"contentblockbykey": {
		"body": [
			"ContentBlockbyKey(${1:STRING}, ${2:STRING}, ${3:BOOLEAN}, ${4:STRING}, ${5:NUMERIC})"
		],
		"prefix": "ContentBlockbyKey",
		"description": "ContentBlockbyKey(1, 2, 3, 4, 5)\n\nReturns content contained in the specified stored content block or code snippet from Content Builder, including the Image Block type. These functions support email messages only. For text-only parts of the email, such as From Address, From Name, or Subject Line, reference the code snippet block.\n\n========== PARAMETERS ============\n\n1* [STRING] \nExternal key of the content block to return\n\n2  [STRING] \nName of the impression region to start\n\n3  [BOOLEAN] \nDetermines whether the function returns an error when the system cannot locate the specified content area or returns an invalid content area. A value of true returns an error. A value of false does not return an error. Defaults to true.\n\n4  [STRING] \nDefault content to return if an error occurs. Defaults to an empty string.\n\n5  [NUMERIC] \nOutput parameter that returns the status of the call. A value of 0 indicates the function found the content area and successfully rendered the content. A value of -1 indicates either no content or an invalid content area.\n\n========== EXAMPLES ==============\n\n%%=ContentBlockbyKey(\"myContentBlock\")=%%\n"
	},
	"format": {
		"body": [
			"Format(${1:STRING}, ${2:STRING}, ${3:STRING}, ${4:STRING})"
		],
		"prefix": "Format",
		"description": "Format(1, 2, 3, 4)\n\nFormats the value according to the string you specify.\n\n========== PARAMETERS ============\n\n1* [STRING] \nVariable to format\n\n2* [STRING] \nA C# compatible format string:\nMM/dd/yyyy\nCn - currency format where n represents the number of decimal places\n\n3  [STRING] \nIndicates data format of value. Valid values include Date and Number.\n\n4  [STRING] \nCulture code used to indicate the correct date format.\n\n========== EXAMPLES ==============\n\n%%=Format(Now(),\"MM/dd/yyyy\")=%%\n"
	},
	"ischtmlbrowser": {
		"body": [
			"IsCHTMLBrowser(${1:STRING})"
		],
		"prefix": "IsCHTMLBrowser",
		"description": "IsCHTMLBrowser(1)\n\nIndicates if the passed-in user agent value represents a CHTML browser. CHTML browsers, such as those found on feature phones, use a modified version of HTML to display information on smaller screens with less resources than smartphones. Returns a value of true or false indicating whether the browser uses CHTML. Use this value to determine whether or not to display CHTML content. Use only with landing pages.\n\n========== PARAMETERS ============\n\n1* [STRING] \nHeader to retrieve from an HTTP request\n\n========== EXAMPLES ==============\n\nIsCHTMLBrowser(\"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/33.0.1750.146 Safari/537.36\")\n"
	}
}